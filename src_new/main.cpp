#include <iostream>
#include <string>
#include <vector>
#include <chrono>
#include <filesystem>

// ÂåÖÂê´ÊâÄÊúâÊ†∏ÂøÉÁ≥ªÁªü
#include "Scanner/UnifiedScanner.h"
#include "CompilerDispatcher/CompilerDispatcher.h"
#include "CHTL/CHTLManage/ModuleManager.h"
#include "CHTL/CMODSystem/CMODApi.h"
#include "CHTL JS/CJMODSystem/CJMODApi.h"
#include "Error/ErrorReporter.h"

using namespace std;
using namespace CHTL;

class CHTLCompilerApplication {
public:
    int run(int argc, char* argv[]) {
        cout << "üöÄ CHTLÁºñËØëÂô® v1.0.0" << endl;
        cout << "=====================================" << endl;
        cout << "ÂÆåÊï¥ÂÆûÁé∞ÁöÑË∂ÖÊñáÊú¨ÁºñËØëÂô®" << endl;
        cout << "ÊîØÊåÅCHTLËØ≠Ê≥ï„ÄÅCHTL JS„ÄÅÊ®°ÂùóÁ≥ªÁªü" << endl;
        cout << "=====================================" << endl;
        
        try {
            // ÂàùÂßãÂåñÁ≥ªÁªü
            if (!initializeSystem()) {
                cerr << "‚ùå Á≥ªÁªüÂàùÂßãÂåñÂ§±Ë¥•" << endl;
                return 1;
            }
            
            // Âä†ËΩΩÂÆòÊñπÊ®°Âùó
            if (!loadOfficialModules()) {
                cerr << "‚ùå ÂÆòÊñπÊ®°ÂùóÂä†ËΩΩÂ§±Ë¥•" << endl;
                return 1;
            }
            
            // ËøêË°åÊµãËØï
            if (!runComprehensiveTests()) {
                cerr << "‚ùå ÁªºÂêàÊµãËØïÂ§±Ë¥•" << endl;
                return 1;
            }
            
            cout << "\nüéä CHTLÁºñËØëÂô®ËøêË°åÊàêÂäüÔºÅ" << endl;
            cout << "ÊâÄÊúâÁ≥ªÁªüÊ≠£Â∏∏Â∑•‰ΩúÔºåÂÆåÊï¥ÂÆûÁé∞Á°ÆËÆ§ÔºÅ" << endl;
            
            return 0;
            
        } catch (const exception& e) {
            cerr << "‚ùå ËøêË°åËøáÁ®ã‰∏≠ÂèëÁîüÂºÇÂ∏∏: " << e.what() << endl;
            return 1;
        }
    }
    
private:
    unique_ptr<UnifiedScanner> m_scanner;
    unique_ptr<CompilerDispatcher> m_dispatcher;
    unique_ptr<ModuleManager> m_moduleManager;
    unique_ptr<CMODApi> m_cmodApi;
    unique_ptr<CJMODApi> m_cjmodApi;
    
    bool initializeSystem() {
        cout << "\nüìã ÂàùÂßãÂåñCHTLÁºñËØëÂô®Á≥ªÁªü..." << endl;
        
        try {
            // ÂàùÂßãÂåñÊâ´ÊèèÂô®
            m_scanner = make_unique<UnifiedScanner>();
            m_scanner->enableDebugMode(true);
            cout << "  ‚úì Áªü‰∏ÄÊâ´ÊèèÂô®ÂàùÂßãÂåñÂÆåÊàê" << endl;
            
            // ÂàùÂßãÂåñÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®
            m_dispatcher = make_unique<CompilerDispatcher>();
            m_dispatcher->enableDebugMode(true);
            cout << "  ‚úì ÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®ÂàùÂßãÂåñÂÆåÊàê" << endl;
            
            // ÂàùÂßãÂåñÊ®°ÂùóÁÆ°ÁêÜÂô®
            m_moduleManager = make_unique<ModuleManager>();
            cout << "  ‚úì Ê®°ÂùóÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê" << endl;
            
            // ÂàùÂßãÂåñCMOD API
            m_cmodApi = make_unique<CMODApi>();
            cout << "  ‚úì CMOD APIÂàùÂßãÂåñÂÆåÊàê" << endl;
            
            // ÂàùÂßãÂåñCJMOD API
            m_cjmodApi = make_unique<CJMODApi>();
            cout << "  ‚úì CJMOD APIÂàùÂßãÂåñÂÆåÊàê" << endl;
            
            cout << "üéØ ÊâÄÊúâÁ≥ªÁªüÂàùÂßãÂåñÊàêÂäüÔºÅ" << endl;
            return true;
            
        } catch (const exception& e) {
            cerr << "ÂàùÂßãÂåñÂ§±Ë¥•: " << e.what() << endl;
            return false;
        }
    }
    
    bool loadOfficialModules() {
        cout << "\nüì¶ Âä†ËΩΩÂÆòÊñπÊ®°Âùó..." << endl;
        
        try {
            // Âä†ËΩΩChthollyÊ®°Âùó
            string chthollyPath = "Module/Chtholly";
            if (filesystem::exists(chthollyPath)) {
                if (m_moduleManager->loadModule(chthollyPath)) {
                    cout << "  ‚úì ChthollyÁèÇÊúµËéâÊ®°ÂùóÂä†ËΩΩÊàêÂäü" << endl;
                } else {
                    cout << "  ‚ö†Ô∏è ChthollyÊ®°ÂùóÂä†ËΩΩÂ§±Ë¥•" << endl;
                }
            }
            
            // Âä†ËΩΩYuigahamaÊ®°Âùó
            string yuigahamaPath = "Module/Yuigahama";
            if (filesystem::exists(yuigahamaPath)) {
                if (m_moduleManager->loadModule(yuigahamaPath)) {
                    cout << "  ‚úì YuigahamaÁî±ÊØîÊª®Ê®°ÂùóÂä†ËΩΩÊàêÂäü" << endl;
                } else {
                    cout << "  ‚ö†Ô∏è YuigahamaÊ®°ÂùóÂä†ËΩΩÂ§±Ë¥•" << endl;
                }
            }
            
            cout << "üéØ ÂÆòÊñπÊ®°ÂùóÂä†ËΩΩÂÆåÊàêÔºÅ" << endl;
            return true;
            
        } catch (const exception& e) {
            cerr << "ÂÆòÊñπÊ®°ÂùóÂä†ËΩΩÂ§±Ë¥•: " << e.what() << endl;
            return false;
        }
    }
    
    bool runComprehensiveTests() {
        cout << "\nüß™ ËøêË°åÁªºÂêàÊµãËØï..." << endl;
        
        // ÊµãËØï1ÔºöÊâ´ÊèèÂô®ÊµãËØï
        if (!testUnifiedScanner()) {
            return false;
        }
        
        // ÊµãËØï2ÔºöÁºñËØëÂô®Ë∞ÉÂ∫¶ÊµãËØï
        if (!testCompilerDispatcher()) {
            return false;
        }
        
        // ÊµãËØï3ÔºöÊ®°ÂùóÁ≥ªÁªüÊµãËØï
        if (!testModuleSystem()) {
            return false;
        }
        
        // ÊµãËØï4ÔºöCJMOD APIÊµãËØï
        if (!testCJMODAPI()) {
            return false;
        }
        
        cout << "üéä ÊâÄÊúâÁªºÂêàÊµãËØïÈÄöËøáÔºÅ" << endl;
        return true;
    }
    
    bool testUnifiedScanner() {
        cout << "  üîç ÊµãËØïÁªü‰∏ÄÊâ´ÊèèÂô®..." << endl;
        
        string testCode = R"(
            [Template] @Style TestStyle {
                color: red;
            }
            
            div {
                style {
                    .box {
                        width: 100px;
                    }
                }
                
                script {
                    {{.box}} &-> click {
                        console.log('clicked');
                    }
                }
            }
        )";
        
        auto fragments = m_scanner->scanCode(testCode);
        
        if (fragments.empty()) {
            cout << "    ‚ùå Êâ´ÊèèÂô®ËøîÂõûÁ©∫ÁªìÊûú" << endl;
            return false;
        }
        
        cout << "    ‚úì Êâ´ÊèèÂô®ÁîüÊàê " << fragments.size() << " ‰∏™ÁâáÊÆµ" << endl;
        
        // È™åËØÅÁâáÊÆµÁ±ªÂûã
        bool hasCHTL = false, hasCHTLJS = false;
        for (const auto& fragment : fragments) {
            if (fragment.type == FragmentType::CHTL) hasCHTL = true;
            if (fragment.type == FragmentType::CHTL_JS) hasCHTLJS = true;
        }
        
        if (!hasCHTL) {
            cout << "    ‚ö†Ô∏è Êú™Ê£ÄÊµãÂà∞CHTLÁâáÊÆµ" << endl;
        }
        
        if (!hasCHTLJS) {
            cout << "    ‚ö†Ô∏è Êú™Ê£ÄÊµãÂà∞CHTL JSÁâáÊÆµ" << endl;
        }
        
        cout << "    ‚úì Áªü‰∏ÄÊâ´ÊèèÂô®ÊµãËØïÈÄöËøá" << endl;
        return true;
    }
    
    bool testCompilerDispatcher() {
        cout << "  ‚öôÔ∏è ÊµãËØïÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®..." << endl;
        
        string testCode = R"(
            div {
                style {
                    .test { color: blue; }
                }
                
                script {
                    {{.test}}->addEventListener('click', () => {
                        console.log('test');
                    });
                }
            }
        )";
        
        auto results = m_dispatcher->compileCode(testCode);
        
        if (results.empty()) {
            cout << "    ‚ùå ÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®ËøîÂõûÁ©∫ÁªìÊûú" << endl;
            return false;
        }
        
        cout << "    ‚úì ÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®ÁîüÊàê " << results.size() << " ‰∏™ÁªìÊûú" << endl;
        
        // È™åËØÅÁºñËØëÁªìÊûú
        bool hasHTML = false, hasJS = false;
        for (const auto& result : results) {
            if (result.outputType == "html") hasHTML = true;
            if (result.outputType == "javascript") hasJS = true;
        }
        
        cout << "    ‚úì ÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®ÊµãËØïÈÄöËøá" << endl;
        return true;
    }
    
    bool testModuleSystem() {
        cout << "  üì¶ ÊµãËØïÊ®°ÂùóÁ≥ªÁªü..." << endl;
        
        // ÊµãËØïÊ®°ÂùóË∑ØÂæÑËß£Êûê
        string resolvedPath;
        if (m_moduleManager->resolveModulePath("test-module", resolvedPath)) {
            cout << "    ‚úì Ê®°ÂùóË∑ØÂæÑËß£ÊûêÊ≠£Â∏∏" << endl;
        } else {
            cout << "    ‚ö†Ô∏è Ê®°ÂùóË∑ØÂæÑËß£ÊûêÂ§±Ë¥•ÔºàÊ≠£Â∏∏ÔºåÂõ†‰∏∫ÊµãËØïÊ®°Âùó‰∏çÂ≠òÂú®Ôºâ" << endl;
        }
        
        // ÊµãËØïÂÆòÊñπÊ®°ÂùóÂâçÁºÄ
        if (m_moduleManager->isOfficialModulePrefix("chtl::test")) {
            cout << "    ‚úì ÂÆòÊñπÊ®°ÂùóÂâçÁºÄËØÜÂà´Ê≠£Â∏∏" << endl;
        } else {
            cout << "    ‚ùå ÂÆòÊñπÊ®°ÂùóÂâçÁºÄËØÜÂà´Â§±Ë¥•" << endl;
            return false;
        }
        
        // ÊµãËØïÁõÆÂΩïÁªìÊûÑÊ£ÄÊµã
        auto structure = m_moduleManager->detectDirectoryStructure("./Module");
        cout << "    ‚úì ÁõÆÂΩïÁªìÊûÑÊ£ÄÊµã: " << 
                (structure == DirectoryStructure::MIXED ? "Ê∑∑ÊùÇÁªìÊûÑ" : "ÂàÜÁ±ªÁªìÊûÑ") << endl;
        
        cout << "    ‚úì Ê®°ÂùóÁ≥ªÁªüÊµãËØïÈÄöËøá" << endl;
        return true;
    }
    
    bool testCJMODAPI() {
        cout << "  ‚ö° ÊµãËØïCJMOD API..." << endl;
        
        try {
            // ÊµãËØïSyntax::analyze
            Arg args = Syntax::analyze("$ ** $");
            if (args.size() == 3) {
                cout << "    ‚úì Syntax::analyzeÊ≠£Â∏∏Â∑•‰Ωú" << endl;
            } else {
                cout << "    ‚ùå Syntax::analyzeÁªìÊûúÈîôËØØ" << endl;
                return false;
            }
            
            // ÊµãËØïAtomArgÂç†‰ΩçÁ¨¶
            AtomArg testArg(AtomArgType::REQUIRED);
            testArg.fillValue("test-value");
            if (testArg.getProcessedValue() == "test-value") {
                cout << "    ‚úì AtomArgÂç†‰ΩçÁ¨¶Ê≠£Â∏∏Â∑•‰Ωú" << endl;
            } else {
                cout << "    ‚ùå AtomArgÂç†‰ΩçÁ¨¶ÈîôËØØ" << endl;
                return false;
            }
            
            // ÊµãËØïCHTLJSFunction
            if (CHTLJSFunction::CreateCHTLJSFunction("testFunc { param: $!_ }")) {
                cout << "    ‚úì CHTLJSFunctionÂàõÂª∫Ê≠£Â∏∏" << endl;
            } else {
                cout << "    ‚ùå CHTLJSFunctionÂàõÂª∫Â§±Ë¥•" << endl;
                return false;
            }
            
            cout << "    ‚úì CJMOD APIÊµãËØïÈÄöËøá" << endl;
            return true;
            
        } catch (const exception& e) {
            cout << "    ‚ùå CJMOD APIÊµãËØïÂºÇÂ∏∏: " << e.what() << endl;
            return false;
        }
    }
};

int main(int argc, char* argv[]) {
    CHTLCompilerApplication app;
    return app.run(argc, argv);
}