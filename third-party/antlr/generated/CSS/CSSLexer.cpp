
// Generated from third-party/antlr/Grammars/CSS3/CSSLexer.g4 by ANTLR 4.13.2


#include "CSSLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CSSLexerStaticData final {
  CSSLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CSSLexerStaticData(const CSSLexerStaticData&) = delete;
  CSSLexerStaticData(CSSLexerStaticData&&) = delete;
  CSSLexerStaticData& operator=(const CSSLexerStaticData&) = delete;
  CSSLexerStaticData& operator=(CSSLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag csslexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CSSLexerStaticData> csslexerLexerStaticData = nullptr;

void csslexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (csslexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(csslexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CSSLexerStaticData>(
    std::vector<std::string>{
      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "SEMICOLON", 
      "COLON", "COMMA", "DOT", "HASH", "AT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "EQUALS", "INCLUDES", "DASHMATCH", "PREFIXMATCH", "SUFFIXMATCH", 
      "SUBSTRINGMATCH", "STRING", "DIGIT", "EXPONENT", "NUMBER", "PERCENTAGE", 
      "NMSTART", "NMCHAR", "NONASCII", "ESCAPE", "IDENT", "DIMENSION", "FUNCTION", 
      "URI", "URL_CHARS", "COMMENT", "WS", "IMPORTANT", "CDO", "CDC", "ONLY_KEYWORD", 
      "NOT_KEYWORD", "AND_KEYWORD", "AT_CHARSET", "AT_IMPORT", "AT_NAMESPACE", 
      "AT_MEDIA", "AT_PAGE", "AT_FONT_FACE", "AT_KEYFRAMES", "AT_SUPPORTS", 
      "FROM_KEYWORD", "TO_KEYWORD", "OR_KEYWORD", "TILDE", "PIPE", "NOT_FUNCTION", 
      "ANYCHAR"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "':'", "','", 
      "'.'", "'#'", "'@'", "'+'", "'-'", "'*'", "'/'", "'='", "'~='", "'|='", 
      "'^='", "'$='", "'*='", "", "", "", "", "", "", "", "", "", "", "'<!--'", 
      "'-->'", "'only'", "'not'", "'and'", "'@charset'", "'@import'", "'@namespace'", 
      "'@media'", "'@page'", "'@font-face'", "'@keyframes'", "'@supports'", 
      "'from'", "'to'", "'or'", "'~'", "'|'", "':not('"
    },
    std::vector<std::string>{
      "", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
      "SEMICOLON", "COLON", "COMMA", "DOT", "HASH", "AT", "PLUS", "MINUS", 
      "MULTIPLY", "DIVIDE", "EQUALS", "INCLUDES", "DASHMATCH", "PREFIXMATCH", 
      "SUFFIXMATCH", "SUBSTRINGMATCH", "STRING", "NUMBER", "PERCENTAGE", 
      "IDENT", "DIMENSION", "FUNCTION", "URI", "COMMENT", "WS", "IMPORTANT", 
      "CDO", "CDC", "ONLY_KEYWORD", "NOT_KEYWORD", "AND_KEYWORD", "AT_CHARSET", 
      "AT_IMPORT", "AT_NAMESPACE", "AT_MEDIA", "AT_PAGE", "AT_FONT_FACE", 
      "AT_KEYFRAMES", "AT_SUPPORTS", "FROM_KEYWORD", "TO_KEYWORD", "OR_KEYWORD", 
      "TILDE", "PIPE", "NOT_FUNCTION", "ANYCHAR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,52,453,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
  	1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
  	1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,5,22,173,
  	8,22,10,22,12,22,176,9,22,1,22,1,22,1,22,1,22,1,22,5,22,183,8,22,10,22,
  	12,22,186,9,22,1,22,3,22,189,8,22,1,23,1,23,1,24,1,24,3,24,195,8,24,1,
  	24,4,24,198,8,24,11,24,12,24,199,1,25,4,25,203,8,25,11,25,12,25,204,1,
  	25,1,25,4,25,209,8,25,11,25,12,25,210,3,25,213,8,25,1,25,3,25,216,8,25,
  	1,26,1,26,1,26,1,27,1,27,1,27,3,27,224,8,27,1,28,1,28,1,28,3,28,229,8,
  	28,1,29,1,29,1,30,1,30,1,30,3,30,236,8,30,1,30,3,30,239,8,30,1,30,3,30,
  	242,8,30,1,30,3,30,245,8,30,1,30,3,30,248,8,30,1,30,1,30,3,30,252,8,30,
  	1,31,1,31,5,31,256,8,31,10,31,12,31,259,9,31,1,32,1,32,1,32,1,33,1,33,
  	1,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,273,8,34,10,34,12,34,276,9,34,
  	1,34,1,34,3,34,280,8,34,1,34,5,34,283,8,34,10,34,12,34,286,9,34,1,34,
  	1,34,1,35,1,35,1,35,5,35,293,8,35,10,35,12,35,296,9,35,1,36,1,36,1,36,
  	1,36,5,36,302,8,36,10,36,12,36,305,9,36,1,36,1,36,1,36,1,36,1,36,1,37,
  	4,37,313,8,37,11,37,12,37,314,1,37,1,37,1,38,1,38,5,38,321,8,38,10,38,
  	12,38,324,9,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
  	1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,
  	1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
  	1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,58,1,58,1,303,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,0,49,0,51,24,53,25,55,0,57,0,59,0,61,0,63,26,
  	65,27,67,28,69,29,71,0,73,30,75,31,77,32,79,33,81,34,83,35,85,36,87,37,
  	89,38,91,39,93,40,95,41,97,42,99,43,101,44,103,45,105,46,107,47,109,48,
  	111,49,113,50,115,51,117,52,1,0,12,4,0,10,10,13,13,34,34,92,92,4,0,10,
  	10,13,13,39,39,92,92,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,
  	65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,1,0,0,127,3,0,48,
  	57,65,70,97,102,5,0,10,10,12,13,48,57,65,70,97,102,5,0,9,10,12,13,32,
  	32,34,34,39,41,3,0,9,10,12,13,32,32,475,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
  	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
  	0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
  	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
  	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,51,1,0,0,0,
  	0,53,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,73,
  	1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
  	0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
  	0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
  	105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
  	115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,121,1,0,0,0,5,123,1,0,0,0,7,
  	125,1,0,0,0,9,127,1,0,0,0,11,129,1,0,0,0,13,131,1,0,0,0,15,133,1,0,0,
  	0,17,135,1,0,0,0,19,137,1,0,0,0,21,139,1,0,0,0,23,141,1,0,0,0,25,143,
  	1,0,0,0,27,145,1,0,0,0,29,147,1,0,0,0,31,149,1,0,0,0,33,151,1,0,0,0,35,
  	153,1,0,0,0,37,156,1,0,0,0,39,159,1,0,0,0,41,162,1,0,0,0,43,165,1,0,0,
  	0,45,188,1,0,0,0,47,190,1,0,0,0,49,192,1,0,0,0,51,202,1,0,0,0,53,217,
  	1,0,0,0,55,223,1,0,0,0,57,228,1,0,0,0,59,230,1,0,0,0,61,251,1,0,0,0,63,
  	253,1,0,0,0,65,260,1,0,0,0,67,263,1,0,0,0,69,266,1,0,0,0,71,294,1,0,0,
  	0,73,297,1,0,0,0,75,312,1,0,0,0,77,318,1,0,0,0,79,335,1,0,0,0,81,340,
  	1,0,0,0,83,344,1,0,0,0,85,349,1,0,0,0,87,353,1,0,0,0,89,357,1,0,0,0,91,
  	366,1,0,0,0,93,374,1,0,0,0,95,385,1,0,0,0,97,392,1,0,0,0,99,398,1,0,0,
  	0,101,409,1,0,0,0,103,420,1,0,0,0,105,430,1,0,0,0,107,435,1,0,0,0,109,
  	438,1,0,0,0,111,441,1,0,0,0,113,443,1,0,0,0,115,445,1,0,0,0,117,451,1,
  	0,0,0,119,120,5,123,0,0,120,2,1,0,0,0,121,122,5,125,0,0,122,4,1,0,0,0,
  	123,124,5,40,0,0,124,6,1,0,0,0,125,126,5,41,0,0,126,8,1,0,0,0,127,128,
  	5,91,0,0,128,10,1,0,0,0,129,130,5,93,0,0,130,12,1,0,0,0,131,132,5,59,
  	0,0,132,14,1,0,0,0,133,134,5,58,0,0,134,16,1,0,0,0,135,136,5,44,0,0,136,
  	18,1,0,0,0,137,138,5,46,0,0,138,20,1,0,0,0,139,140,5,35,0,0,140,22,1,
  	0,0,0,141,142,5,64,0,0,142,24,1,0,0,0,143,144,5,43,0,0,144,26,1,0,0,0,
  	145,146,5,45,0,0,146,28,1,0,0,0,147,148,5,42,0,0,148,30,1,0,0,0,149,150,
  	5,47,0,0,150,32,1,0,0,0,151,152,5,61,0,0,152,34,1,0,0,0,153,154,5,126,
  	0,0,154,155,5,61,0,0,155,36,1,0,0,0,156,157,5,124,0,0,157,158,5,61,0,
  	0,158,38,1,0,0,0,159,160,5,94,0,0,160,161,5,61,0,0,161,40,1,0,0,0,162,
  	163,5,36,0,0,163,164,5,61,0,0,164,42,1,0,0,0,165,166,5,42,0,0,166,167,
  	5,61,0,0,167,44,1,0,0,0,168,174,5,34,0,0,169,173,8,0,0,0,170,171,5,92,
  	0,0,171,173,9,0,0,0,172,169,1,0,0,0,172,170,1,0,0,0,173,176,1,0,0,0,174,
  	172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,189,5,
  	34,0,0,178,184,5,39,0,0,179,183,8,1,0,0,180,181,5,92,0,0,181,183,9,0,
  	0,0,182,179,1,0,0,0,182,180,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,
  	185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,189,5,39,0,0,188,168,
  	1,0,0,0,188,178,1,0,0,0,189,46,1,0,0,0,190,191,7,2,0,0,191,48,1,0,0,0,
  	192,194,7,3,0,0,193,195,7,4,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,197,
  	1,0,0,0,196,198,3,47,23,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,
  	0,0,199,200,1,0,0,0,200,50,1,0,0,0,201,203,3,47,23,0,202,201,1,0,0,0,
  	203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,212,1,0,0,0,206,208,
  	5,46,0,0,207,209,3,47,23,0,208,207,1,0,0,0,209,210,1,0,0,0,210,208,1,
  	0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,206,1,0,0,0,212,213,1,0,0,0,
  	213,215,1,0,0,0,214,216,3,49,24,0,215,214,1,0,0,0,215,216,1,0,0,0,216,
  	52,1,0,0,0,217,218,3,51,25,0,218,219,5,37,0,0,219,54,1,0,0,0,220,224,
  	7,5,0,0,221,224,3,59,29,0,222,224,3,61,30,0,223,220,1,0,0,0,223,221,1,
  	0,0,0,223,222,1,0,0,0,224,56,1,0,0,0,225,229,7,6,0,0,226,229,3,59,29,
  	0,227,229,3,61,30,0,228,225,1,0,0,0,228,226,1,0,0,0,228,227,1,0,0,0,229,
  	58,1,0,0,0,230,231,8,7,0,0,231,60,1,0,0,0,232,233,5,92,0,0,233,235,7,
  	8,0,0,234,236,7,8,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,
  	237,239,7,8,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,242,
  	7,8,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,245,7,8,0,
  	0,244,243,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,248,7,8,0,0,247,
  	246,1,0,0,0,247,248,1,0,0,0,248,252,1,0,0,0,249,250,5,92,0,0,250,252,
  	8,9,0,0,251,232,1,0,0,0,251,249,1,0,0,0,252,62,1,0,0,0,253,257,3,55,27,
  	0,254,256,3,57,28,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,
  	258,1,0,0,0,258,64,1,0,0,0,259,257,1,0,0,0,260,261,3,51,25,0,261,262,
  	3,63,31,0,262,66,1,0,0,0,263,264,3,63,31,0,264,265,5,40,0,0,265,68,1,
  	0,0,0,266,267,5,117,0,0,267,268,5,114,0,0,268,269,5,108,0,0,269,270,5,
  	40,0,0,270,274,1,0,0,0,271,273,3,75,37,0,272,271,1,0,0,0,273,276,1,0,
  	0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,279,1,0,0,0,276,274,1,0,0,0,277,
  	280,3,45,22,0,278,280,3,71,35,0,279,277,1,0,0,0,279,278,1,0,0,0,280,284,
  	1,0,0,0,281,283,3,75,37,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,0,
  	0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,5,41,0,0,
  	288,70,1,0,0,0,289,293,8,10,0,0,290,291,5,92,0,0,291,293,9,0,0,0,292,
  	289,1,0,0,0,292,290,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,
  	0,0,0,295,72,1,0,0,0,296,294,1,0,0,0,297,298,5,47,0,0,298,299,5,42,0,
  	0,299,303,1,0,0,0,300,302,9,0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,
  	304,1,0,0,0,303,301,1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,5,
  	42,0,0,307,308,5,47,0,0,308,309,1,0,0,0,309,310,6,36,0,0,310,74,1,0,0,
  	0,311,313,7,11,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,1,0,0,0,314,
  	315,1,0,0,0,315,316,1,0,0,0,316,317,6,37,0,0,317,76,1,0,0,0,318,322,5,
  	33,0,0,319,321,3,75,37,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,
  	0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,105,0,0,
  	326,327,5,109,0,0,327,328,5,112,0,0,328,329,5,111,0,0,329,330,5,114,0,
  	0,330,331,5,116,0,0,331,332,5,97,0,0,332,333,5,110,0,0,333,334,5,116,
  	0,0,334,78,1,0,0,0,335,336,5,60,0,0,336,337,5,33,0,0,337,338,5,45,0,0,
  	338,339,5,45,0,0,339,80,1,0,0,0,340,341,5,45,0,0,341,342,5,45,0,0,342,
  	343,5,62,0,0,343,82,1,0,0,0,344,345,5,111,0,0,345,346,5,110,0,0,346,347,
  	5,108,0,0,347,348,5,121,0,0,348,84,1,0,0,0,349,350,5,110,0,0,350,351,
  	5,111,0,0,351,352,5,116,0,0,352,86,1,0,0,0,353,354,5,97,0,0,354,355,5,
  	110,0,0,355,356,5,100,0,0,356,88,1,0,0,0,357,358,5,64,0,0,358,359,5,99,
  	0,0,359,360,5,104,0,0,360,361,5,97,0,0,361,362,5,114,0,0,362,363,5,115,
  	0,0,363,364,5,101,0,0,364,365,5,116,0,0,365,90,1,0,0,0,366,367,5,64,0,
  	0,367,368,5,105,0,0,368,369,5,109,0,0,369,370,5,112,0,0,370,371,5,111,
  	0,0,371,372,5,114,0,0,372,373,5,116,0,0,373,92,1,0,0,0,374,375,5,64,0,
  	0,375,376,5,110,0,0,376,377,5,97,0,0,377,378,5,109,0,0,378,379,5,101,
  	0,0,379,380,5,115,0,0,380,381,5,112,0,0,381,382,5,97,0,0,382,383,5,99,
  	0,0,383,384,5,101,0,0,384,94,1,0,0,0,385,386,5,64,0,0,386,387,5,109,0,
  	0,387,388,5,101,0,0,388,389,5,100,0,0,389,390,5,105,0,0,390,391,5,97,
  	0,0,391,96,1,0,0,0,392,393,5,64,0,0,393,394,5,112,0,0,394,395,5,97,0,
  	0,395,396,5,103,0,0,396,397,5,101,0,0,397,98,1,0,0,0,398,399,5,64,0,0,
  	399,400,5,102,0,0,400,401,5,111,0,0,401,402,5,110,0,0,402,403,5,116,0,
  	0,403,404,5,45,0,0,404,405,5,102,0,0,405,406,5,97,0,0,406,407,5,99,0,
  	0,407,408,5,101,0,0,408,100,1,0,0,0,409,410,5,64,0,0,410,411,5,107,0,
  	0,411,412,5,101,0,0,412,413,5,121,0,0,413,414,5,102,0,0,414,415,5,114,
  	0,0,415,416,5,97,0,0,416,417,5,109,0,0,417,418,5,101,0,0,418,419,5,115,
  	0,0,419,102,1,0,0,0,420,421,5,64,0,0,421,422,5,115,0,0,422,423,5,117,
  	0,0,423,424,5,112,0,0,424,425,5,112,0,0,425,426,5,111,0,0,426,427,5,114,
  	0,0,427,428,5,116,0,0,428,429,5,115,0,0,429,104,1,0,0,0,430,431,5,102,
  	0,0,431,432,5,114,0,0,432,433,5,111,0,0,433,434,5,109,0,0,434,106,1,0,
  	0,0,435,436,5,116,0,0,436,437,5,111,0,0,437,108,1,0,0,0,438,439,5,111,
  	0,0,439,440,5,114,0,0,440,110,1,0,0,0,441,442,5,126,0,0,442,112,1,0,0,
  	0,443,444,5,124,0,0,444,114,1,0,0,0,445,446,5,58,0,0,446,447,5,110,0,
  	0,447,448,5,111,0,0,448,449,5,116,0,0,449,450,5,40,0,0,450,116,1,0,0,
  	0,451,452,9,0,0,0,452,118,1,0,0,0,29,0,172,174,182,184,188,194,199,204,
  	210,212,215,223,228,235,238,241,244,247,251,257,274,279,284,292,294,303,
  	314,322,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  csslexerLexerStaticData = std::move(staticData);
}

}

CSSLexer::CSSLexer(CharStream *input) : Lexer(input) {
  CSSLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *csslexerLexerStaticData->atn, csslexerLexerStaticData->decisionToDFA, csslexerLexerStaticData->sharedContextCache);
}

CSSLexer::~CSSLexer() {
  delete _interpreter;
}

std::string CSSLexer::getGrammarFileName() const {
  return "CSSLexer.g4";
}

const std::vector<std::string>& CSSLexer::getRuleNames() const {
  return csslexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CSSLexer::getChannelNames() const {
  return csslexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CSSLexer::getModeNames() const {
  return csslexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CSSLexer::getVocabulary() const {
  return csslexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CSSLexer::getSerializedATN() const {
  return csslexerLexerStaticData->serializedATN;
}

const atn::ATN& CSSLexer::getATN() const {
  return *csslexerLexerStaticData->atn;
}




void CSSLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  csslexerLexerInitialize();
#else
  ::antlr4::internal::call_once(csslexerLexerOnceFlag, csslexerLexerInitialize);
#endif
}
