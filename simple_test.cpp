#include "src/CHTL/CHTLLexer/Lexer.h"
#include "src/CHTL/CHTLParser/Parser.h"
#include "src/CHTL/CHTLGenerator/Generator.h"
#include "src/CHTL/CHTLSelector/SelectorAutomation.h"
#include "src/CMODSystem/Syntax.h"
#include <iostream>
#include <memory>

int main() {
    std::cout << "üöÄ CHTLÁ≥ªÁªüÂäüËÉΩÈ™åËØÅÊµãËØï" << std::endl;
    
    try {
        // 1. ÊµãËØïËØçÊ≥ïÂàÜÊûêÂô®
        std::string testCode = R"(
<!DOCTYPE html>
<html>
<head>
    <title>ÊµãËØïÈ°µÈù¢</title>
    <style>
        .box { color: red; }
    </style>
</head>
<body>
    <div class="box">Hello CHTL!</div>
    <script>
        console.log("CHTL JS Â∑•‰ΩúÊ≠£Â∏∏");
    </script>
</body>
</html>
        )";
        
        std::cout << "‚úÖ ÊµãËØïÂÜÖÂÆπÂáÜÂ§áÂÆåÊàê" << std::endl;
        
        // 2. ÊµãËØïÈÖçÁΩÆ
        CHTL::LexerConfig lexerConfig;
        auto lexer = std::make_unique<CHTL::Lexer>(testCode, lexerConfig);
        std::cout << "‚úÖ ËØçÊ≥ïÂàÜÊûêÂô®ÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // 3. ÊµãËØïËß£ÊûêÂô®
        CHTL::ParserConfig parserConfig;
        parserConfig.enableRecovery = true;
        parserConfig.strictMode = false;
        
        CHTL::Parser parser(std::move(lexer), parserConfig);
        std::cout << "‚úÖ Ëß£ÊûêÂô®ÂàõÂª∫ÊàêÂäü" << std::endl;
        
        auto ast = parser.parse();
        if (ast) {
            std::cout << "‚úÖ ËØ≠Ê≥ïËß£ÊûêÊàêÂäüÔºåËäÇÁÇπÁ±ªÂûã: " << static_cast<int>(ast->getType()) << std::endl;
        } else {
            std::cout << "‚ùå ËØ≠Ê≥ïËß£ÊûêÂ§±Ë¥•" << std::endl;
            auto errors = parser.getErrors();
            for (const auto& error : errors) {
                std::cout << "   ÈîôËØØ: " << error.toString() << std::endl;
            }
        }
        
        // 4. ÊµãËØïÁîüÊàêÂô®
        if (ast) {
            CHTL::GeneratorConfig genConfig;
            genConfig.formatHTML = true;
            genConfig.includeComments = true;
            
            CHTL::Generator generator(genConfig);
            auto result = generator.generate(ast.get());
            
            if (result.success) {
                std::cout << "‚úÖ ‰ª£Á†ÅÁîüÊàêÊàêÂäü" << std::endl;
                std::cout << "   HTMLÈïøÂ∫¶: " << result.html.length() << std::endl;
                std::cout << "   CSSÈïøÂ∫¶: " << result.css.length() << std::endl;
                std::cout << "   JSÈïøÂ∫¶: " << result.javascript.length() << std::endl;
            } else {
                std::cout << "‚ùå ‰ª£Á†ÅÁîüÊàêÂ§±Ë¥•" << std::endl;
            }
        }
        
        // 5. ÊµãËØïÈÄâÊã©Âô®Ëá™Âä®Âåñ
        CHTL::SelectorAutomationConfig autoConfig;
        CHTL::SelectorAutomationManager autoManager(autoConfig);
        std::cout << "‚úÖ ÈÄâÊã©Âô®Ëá™Âä®ÂåñÁ≥ªÁªüÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // 6. ÊµãËØïCJMOD API
        auto cjmodResult = CJMOD::Syntax::analyze("test->function { param: $, value: $? }");
        std::cout << "‚úÖ CJMODËØ≠Ê≥ïÂàÜÊûêÊàêÂäüÔºåÂéüÂ≠êÊï∞: " << cjmodResult.atoms.size() << std::endl;
        
        std::cout << "\nüéâ === ÊâÄÊúâÊ†∏ÂøÉÂäüËÉΩÈ™åËØÅÂÆåÊàê ===" << std::endl;
        std::cout << "‚úÖ ËØçÊ≥ïÂàÜÊûêÂô®: Ê≠£Â∏∏" << std::endl;
        std::cout << "‚úÖ ËØ≠Ê≥ïËß£ÊûêÂô®: Ê≠£Â∏∏" << std::endl;
        std::cout << "‚úÖ ‰ª£Á†ÅÁîüÊàêÂô®: Ê≠£Â∏∏" << std::endl;
        std::cout << "‚úÖ ÈÄâÊã©Âô®Ëá™Âä®Âåñ: Ê≠£Â∏∏" << std::endl;
        std::cout << "‚úÖ CJMOD API: Ê≠£Â∏∏" << std::endl;
        std::cout << "\nüåü CHTLÁ≥ªÁªüÊ†∏ÂøÉÂäüËÉΩÂÖ®ÈÉ®Ê≠£Â∏∏ËøêË°åÔºÅ" << std::endl;
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cout << "‚ùå Á≥ªÁªüÂºÇÂ∏∏: " << e.what() << std::endl;
        return 1;
    }
}