# CHTL 核心版本 (不依赖ANTLR)
cmake_minimum_required(VERSION 3.16)
project(CHTL_Core VERSION 1.0.0)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Windows特定配置
if(WIN32 AND MSVC)
    add_compile_options(/utf-8)  # UTF-8编码支持
    add_compile_options(/W3)     # 警告级别
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    add_compile_definitions(WIN32_LEAN_AND_MEAN)
    add_compile_definitions(NOMINMAX)
endif()

message(STATUS "CHTL核心版本构建配置:")
message(STATUS "  C++标准: ${CMAKE_CXX_STANDARD}")
message(STATUS "  构建类型: ${CMAKE_BUILD_TYPE}")

# CHTL核心源文件 (确保这些文件存在)
set(CHTL_CORE_SOURCES
    # 核心CHTL词法和语法分析
    src/CHTL/CHTLLexer/Token.cpp
    src/CHTL/CHTLLexer/GlobalMap.cpp
    src/CHTL/CHTLLexer/Lexer.cpp
    src/CHTL/CHTLParser/Parser.cpp
    src/CHTL/CHTLParser/SafetyMethods.cpp
    
    # AST节点系统
    src/CHTL/CHTLNode/BaseNode.cpp
    src/CHTL/CHTLNode/TemplateNode.cpp
    src/CHTL/CHTLNode/CustomNode.cpp
    src/CHTL/CHTLNode/OriginNode.cpp
    src/CHTL/CHTLNode/ConstraintNode.cpp
    src/CHTL/CHTLNode/SpecializationNode.cpp
    src/CHTL/CHTLNode/ImportNode.cpp
    src/CHTL/CHTLNode/InheritanceManager.cpp
    
    # 代码生成系统
    src/CHTL/CHTLGenerator/Generator.cpp
    src/CHTL/CHTLGenerator/GeneratorMethods.cpp
    
    # 配置和上下文管理
    src/CHTL/CHTLConfig/ConfigurationManager.cpp
    src/CHTL/CHTLContext/Context.cpp
    src/CHTL/CHTLState/State.cpp
    
    # 约束和验证系统
    src/CHTL/CHTLConstraint/ConstraintSystem.cpp
    src/CHTL/CHTLNamespace/NamespaceManager.cpp
    
    # 选择器自动化
    src/CHTL/CHTLSelector/SelectorAutomation.cpp
    
    # 导入和加载器
    src/CHTL/CHTLLoader/ImportEnhancer.cpp
    src/CHTL/CMODSystem/CMODManager.cpp
    
    # IO流系统
    src/CHTL/CHTLIOStream/FileStream.cpp
    
    # CHTL JS增强系统
    src/CHTLJS/CHTLJSLexer/Token.cpp
    src/CHTLJS/CHTLJSLexer/GlobalMap.cpp
    src/CHTLJS/CHTLJSLexer/Lexer.cpp
    src/CHTLJS/CHTLJSParser/EnhancedParser.cpp
    src/CHTLJS/CHTLJSIOStream/JSFileStream.cpp
    
    # CMOD/CJMOD扩展系统 (重点：确保CJMOD可用)
    src/CMODSystem/Syntax.cpp
    src/CMODSystem/CJMODGenerator.cpp
    
    # 统一扫描器 (支持混合代码)
    src/Scanner/UnifiedScanner.cpp
    
    # 工具和基础设施
    src/Util/FileSystem/FileSystem.cpp
    src/Error/ErrorManager.cpp
    src/Module/ModuleManager.cpp
    
    # 测试框架
    src/Test/UtilTest/UtilTestSuite.cpp
    src/Test/TokenTest/TokenPrint.cpp
    src/Test/ASTTest/ASTPrint.cpp
    src/Test/CompileTimer/CompileTimer.cpp
)

# 检查关键源文件是否存在
set(CRITICAL_FILES
    "src/CHTL/CHTLLexer/Lexer.cpp"
    "src/CHTL/CHTLParser/Parser.cpp"  
    "src/CMODSystem/Syntax.cpp"
    "src/Scanner/UnifiedScanner.cpp"
)

foreach(file ${CRITICAL_FILES})
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}")
        message(WARNING "关键文件不存在: ${file}")
    endif()
endforeach()

# 创建静态库
add_library(chtl_core STATIC ${CHTL_CORE_SOURCES})

# 包含目录
target_include_directories(chtl_core PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# 编译特性
target_compile_features(chtl_core PUBLIC cxx_std_17)

# 预处理器定义
target_compile_definitions(chtl_core PUBLIC
    CHTL_VERSION_MAJOR=1
    CHTL_VERSION_MINOR=0
    CHTL_VERSION_PATCH=0
    CHTL_CORE_BUILD=1
)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(chtl_core PUBLIC CHTL_DEBUG)
endif()

# Windows系统库链接
if(WIN32)
    target_link_libraries(chtl_core
        kernel32
        user32
        gdi32
        shell32
        ole32
        oleaut32
        uuid
        comdlg32
        advapi32
    )
endif()

# 输出构建信息
message(STATUS "CHTL核心库构建完成:")
message(STATUS "  目标库: chtl_core")
message(STATUS "  源文件数: ${CHTL_CORE_SOURCES}")
message(STATUS "  包含CJMOD: ✓")
message(STATUS "  包含SPA支持: ✓")
message(STATUS "  不依赖ANTLR: ✓")