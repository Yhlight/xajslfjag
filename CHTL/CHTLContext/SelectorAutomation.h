#ifndef SELECTORAUTOMATION_H
#define SELECTORAUTOMATION_H

#include <string>
#include <vector>
#include <memory>
#include <unordered_map>
#include <unordered_set>
#include "ConfigurationManager.h"

namespace CHTL {

/**
 * @brief 选择器类型枚举
 */
enum class SelectorType {
    CLASS,          // 类选择器 (.box)
    ID,             // ID选择器 (#box)
    TAG,            // 标签选择器 (div)
    PSEUDO_CLASS,   // 伪类选择器 (:hover)
    PSEUDO_ELEMENT, // 伪元素选择器 (::before)
    COMBINATOR,     // 组合选择器 (.box div)
    UNIVERSAL       // 通用选择器 (*)
};

/**
 * @brief 选择器结构
 */
struct Selector {
    SelectorType type;
    std::string value;           // 选择器值（如：box, hover, before）
    std::string fullSelector;    // 完整选择器（如：.box, :hover, ::before）
    int lineNumber;              // 行号
    int columnNumber;            // 列号
    bool isAutoGenerated;        // 是否自动生成
    
    Selector() : type(SelectorType::CLASS), lineNumber(0), columnNumber(0), isAutoGenerated(false) {}
};

/**
 * @brief 选择器上下文结构
 */
struct SelectorContext {
    std::string elementName;     // 元素名称
    std::string className;       // 类名
    std::string idName;          // ID名
    std::vector<std::shared_ptr<Selector>> selectors; // 选择器列表
    bool hasStyleBlock;          // 是否有样式块
    bool hasScriptBlock;         // 是否有脚本块
    std::string sourceFile;      // 源文件
    int lineNumber;              // 行号
    
    SelectorContext() : hasStyleBlock(false), hasScriptBlock(false), lineNumber(0) {}
};

/**
 * @brief 自动化规则结构
 */
struct AutomationRule {
    bool disableStyleAutoAddClass;    // 禁止样式块自动添加类选择器
    bool disableStyleAutoAddId;       // 禁止样式块自动添加ID选择器
    bool disableScriptAutoAddClass;   // 禁止脚本块自动添加类选择器
    bool disableScriptAutoAddId;      // 禁止脚本块自动添加ID选择器
    
    AutomationRule() : disableStyleAutoAddClass(false), disableStyleAutoAddId(false),
                       disableScriptAutoAddClass(true), disableScriptAutoAddId(true) {}
};

/**
 * @brief 选择器自动化管理器
 * 负责管理CHTL项目的选择器自动化功能
 */
class SelectorAutomation {
public:
    /**
     * @brief 构造函数
     * @param configManager 配置管理器指针
     */
    SelectorAutomation(std::shared_ptr<ConfigurationManager> configManager);
    
    /**
     * @brief 析构函数
     */
    ~SelectorAutomation();
    
    /**
     * @brief 解析选择器
     * @param selectorText 选择器文本
     * @param lineNumber 行号
     * @param columnNumber 列号
     * @return 选择器指针
     */
    std::shared_ptr<Selector> parseSelector(const std::string& selectorText, int lineNumber = 0, int columnNumber = 0);
    
    /**
     * @brief 处理元素的选择器自动化
     * @param context 选择器上下文
     * @return 是否成功处理
     */
    bool processElementAutomation(std::shared_ptr<SelectorContext>& context);
    
    /**
     * @brief 处理样式块的自动化
     * @param context 选择器上下文
     * @return 是否成功处理
     */
    bool processStyleBlockAutomation(std::shared_ptr<SelectorContext>& context);
    
    /**
     * @brief 处理脚本块的自动化
     * @param context 选择器上下文
     * @return 是否成功处理
     */
    bool processScriptBlockAutomation(std::shared_ptr<SelectorContext>& context);
    
    /**
     * @brief 解析引用选择器
     * @param selectorText 选择器文本
     * @param context 选择器上下文
     * @return 解析后的选择器
     */
    std::string resolveReferenceSelector(const std::string& selectorText, const std::shared_ptr<SelectorContext>& context);
    
    /**
     * @brief 获取自动化规则
     * @return 自动化规则
     */
    const AutomationRule& getAutomationRule() const;
    
    /**
     * @brief 设置自动化规则
     * @param rule 自动化规则
     */
    void setAutomationRule(const AutomationRule& rule);
    
    /**
     * @brief 从配置加载自动化规则
     * @param configGroupName 配置组名称
     * @return 是否成功加载
     */
    bool loadAutomationRuleFromConfig(const std::string& configGroupName = "");
    
    /**
     * @brief 验证选择器语法
     * @param selectorText 选择器文本
     * @return 是否有效
     */
    bool validateSelector(const std::string& selectorText) const;
    
    /**
     * @brief 获取选择器类型
     * @param selectorText 选择器文本
     * @return 选择器类型
     */
    SelectorType getSelectorType(const std::string& selectorText) const;
    
    /**
     * @brief 提取选择器值
     * @param selectorText 选择器文本
     * @return 选择器值
     */
    std::string extractSelectorValue(const std::string& selectorText) const;
    
    /**
     * @brief 检查是否需要自动添加属性
     * @param context 选择器上下文
     * @param selectorType 选择器类型
     * @return 是否需要自动添加
     */
    bool needsAutoAttribute(const std::shared_ptr<SelectorContext>& context, SelectorType selectorType) const;
    
    /**
     * @brief 生成自动属性
     * @param context 选择器上下文
     * @param selectorType 选择器类型
     * @return 生成的属性文本
     */
    std::string generateAutoAttribute(const std::shared_ptr<SelectorContext>& context, SelectorType selectorType) const;
    
    /**
     * @brief 获取选择器优先级
     * @param selector 选择器
     * @return 优先级值（数值越大优先级越高）
     */
    int getSelectorPriority(const std::shared_ptr<Selector>& selector) const;
    
    /**
     * @brief 排序选择器（按优先级）
     * @param selectors 选择器列表
     */
    void sortSelectorsByPriority(std::vector<std::shared_ptr<Selector>>& selectors) const;
    
    /**
     * @brief 获取统计信息
     * @return 统计信息字符串
     */
    std::string getStatistics() const;
    
    /**
     * @brief 清除统计信息
     */
    void clearStatistics();

private:
    std::shared_ptr<ConfigurationManager> configManager_;
    AutomationRule automationRule_;
    
    // 统计信息
    int totalSelectorsProcessed_;
    int autoAttributesGenerated_;
    int styleBlockAutomations_;
    int scriptBlockAutomations_;
    
    /**
     * @brief 解析CSS选择器语法
     * @param selectorText 选择器文本
     * @return 解析结果
     */
    std::vector<std::string> parseCSSSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为类选择器
     * @param selectorText 选择器文本
     * @return 是否为类选择器
     */
    bool isClassSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为ID选择器
     * @param selectorText 选择器文本
     * @return 是否为ID选择器
     */
    bool isIdSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为伪类选择器
     * @param selectorText 选择器文本
     * @return 是否为伪类选择器
     */
    bool isPseudoClassSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为伪元素选择器
     * @param selectorText 选择器文本
     * @return 是否为伪元素选择器
     */
    bool isPseudoElementSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为标签选择器
     * @param selectorText 选择器文本
     * @return 是否为标签选择器
     */
    bool isTagSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为组合选择器
     * @param selectorText 选择器文本
     * @return 是否为组合选择器
     */
    bool isCombinatorSelector(const std::string& selectorText) const;
    
    /**
     * @brief 检查选择器是否为通用选择器
     * @param selectorText 选择器文本
     * @return 是否为通用选择器
     */
    bool isUniversalSelector(const std::string& selectorText) const;
    
    /**
     * @brief 更新统计信息
     * @param type 统计类型
     */
    void updateStatistics(const std::string& type);
};

} // namespace CHTL

#endif // SELECTORAUTOMATION_H