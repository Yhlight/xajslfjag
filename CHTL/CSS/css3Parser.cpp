
// Generated from D:/new/css3/css3Parser.g4 by ANTLR 4.13.2


#include "css3ParserListener.h"

#include "css3Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Css3ParserStaticData final {
  Css3ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Css3ParserStaticData(const Css3ParserStaticData&) = delete;
  Css3ParserStaticData(Css3ParserStaticData&&) = delete;
  Css3ParserStaticData& operator=(const Css3ParserStaticData&) = delete;
  Css3ParserStaticData& operator=(Css3ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag css3parserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Css3ParserStaticData> css3parserParserStaticData = nullptr;

void css3parserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (css3parserParserStaticData != nullptr) {
    return;
  }
#else
  assert(css3parserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Css3ParserStaticData>(
    std::vector<std::string>{
      "stylesheet", "charset", "imports", "namespace_", "namespacePrefix", 
      "media", "mediaQueryList", "mediaQuery", "mediaType", "mediaExpression", 
      "mediaFeature", "page", "pseudoPage", "selectorGroup", "selector", 
      "combinator", "simpleSelectorSequence", "typeSelector", "typeNamespacePrefix", 
      "elementName", "universal", "className", "attrib", "pseudo", "functionalPseudo", 
      "expression", "negation", "negationArg", "operator_", "property_", 
      "ruleset", "declarationList", "declaration", "prio", "value", "expr", 
      "term", "function_", "dxImageTransform", "hexcolor", "number", "percentage", 
      "dimension", "unknownDimension", "any_", "atRule", "unused", "block", 
      "nestedStatement", "groupRuleBody", "supportsRule", "supportsCondition", 
      "supportsConditionInParens", "supportsNegation", "supportsConjunction", 
      "supportsDisjunction", "supportsDeclarationCondition", "generalEnclosed", 
      "url", "var_", "calc", "calcSum", "calcProduct", "calcValue", "fontFaceRule", 
      "fontFaceDeclaration", "keyframesRule", "keyframeBlock", "keyframeSelector", 
      "viewport", "counterStyle", "fontFeatureValuesRule", "fontFamilyNameList", 
      "fontFamilyName", "featureValueBlock", "featureType", "featureValueDefinition", 
      "ident", "ws"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", 
      "'.'", "'*'", "'/'", "'|'", "'_'", "", "", "", "'<!--'", "'-->'", 
      "'~='", "'|='", "", "", "", "", "", "'@charset '", "", "", "'url('", 
      "", "", "", "", "", "", "'+'", "'-'", "'>'", "','", "'~'", "", "", 
      "", "'^='", "'$='", "'*='", "", "", "", "", "", "", "'calc('", "", 
      "", "", "", "", "", "'var('"
    },
    std::vector<std::string>{
      "", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
      "CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
      "Pipe", "Underscore", "Comment", "Url", "Space", "Cdo", "Cdc", "Includes", 
      "DashMatch", "Hash", "Import", "Page", "Media", "Namespace", "Charset", 
      "Important", "Percentage", "Url_", "UnicodeRange", "MediaOnly", "Not", 
      "And", "Dimension", "UnknownDimension", "Plus", "Minus", "Greater", 
      "Comma", "Tilde", "PseudoNot", "Number", "String_", "PrefixMatch", 
      "SuffixMatch", "SubstringMatch", "FontFace", "Supports", "Or", "Keyframes", 
      "From", "To", "Calc", "Viewport", "CounterStyle", "FontFeatureValues", 
      "DxImageTransform", "AtKeyword", "Variable", "Var", "Ident", "Function_", 
      "UnexpectedCharacter"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,64,1137,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,1,0,1,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,5,0,167,8,0,10,
  	0,12,0,170,9,0,1,0,1,0,5,0,174,8,0,10,0,12,0,177,9,0,5,0,179,8,0,10,0,
  	12,0,182,9,0,1,0,1,0,5,0,186,8,0,10,0,12,0,189,9,0,5,0,191,8,0,10,0,12,
  	0,194,9,0,1,0,1,0,5,0,198,8,0,10,0,12,0,201,9,0,5,0,203,8,0,10,0,12,0,
  	206,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,222,
  	8,1,1,2,1,2,1,2,1,2,3,2,228,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
  	2,239,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,249,8,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,2,3,2,258,8,2,1,2,1,2,3,2,262,8,2,1,3,1,3,1,3,1,3,1,3,3,3,269,
  	8,3,1,3,1,3,3,3,273,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,284,8,
  	3,1,3,1,3,3,3,288,8,3,1,3,1,3,3,3,292,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,6,1,6,1,6,1,6,1,6,5,6,307,8,6,10,6,12,6,310,9,6,3,6,312,8,6,1,6,
  	1,6,1,7,3,7,317,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,326,8,7,10,7,12,7,
  	329,9,7,1,7,1,7,1,7,1,7,1,7,5,7,336,8,7,10,7,12,7,339,9,7,3,7,341,8,7,
  	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,352,8,9,1,9,1,9,1,9,1,10,1,10,
  	1,10,1,11,1,11,1,11,3,11,363,8,11,1,11,1,11,1,11,3,11,368,8,11,1,11,1,
  	11,1,11,3,11,373,8,11,5,11,375,8,11,10,11,12,11,378,9,11,1,11,1,11,1,
  	11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,5,13,392,8,13,10,13,12,
  	13,395,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,403,8,14,10,14,12,14,406,
  	9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,416,8,15,1,16,1,16,
  	3,16,420,8,16,1,16,1,16,1,16,1,16,1,16,5,16,427,8,16,10,16,12,16,430,
  	9,16,1,16,1,16,1,16,1,16,1,16,4,16,437,8,16,11,16,12,16,438,3,16,441,
  	8,16,1,17,3,17,444,8,17,1,17,1,17,1,18,1,18,3,18,450,8,18,1,18,1,18,1,
  	19,1,19,1,20,3,20,457,8,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,3,
  	22,467,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,475,8,22,1,22,1,22,3,22,
  	479,8,22,1,22,1,22,1,23,1,23,3,23,485,8,23,1,23,1,23,3,23,489,8,23,1,
  	24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,503,8,
  	25,1,25,4,25,506,8,25,11,25,12,25,507,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	27,1,27,1,27,1,27,1,27,1,27,3,27,522,8,27,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,3,28,532,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,3,29,543,8,29,1,30,1,30,1,30,1,30,3,30,549,8,30,1,30,1,30,1,30,1,30,
  	5,30,555,8,30,10,30,12,30,558,9,30,1,30,1,30,1,30,3,30,563,8,30,1,30,
  	1,30,1,30,3,30,568,8,30,1,31,1,31,5,31,572,8,31,10,31,12,31,575,9,31,
  	1,31,1,31,1,31,1,31,1,31,3,31,582,8,31,5,31,584,8,31,10,31,12,31,587,
  	9,31,1,32,1,32,1,32,1,32,1,32,3,32,594,8,32,1,32,1,32,1,32,1,32,1,32,
  	3,32,601,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,4,34,610,8,34,11,34,
  	12,34,611,1,35,1,35,3,35,616,8,35,1,35,5,35,619,8,35,10,35,12,35,622,
  	9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
  	3,36,651,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,39,1,39,1,39,1,40,3,40,669,8,40,1,40,1,40,1,41,3,41,674,8,41,1,
  	41,1,41,1,42,3,42,679,8,42,1,42,1,42,1,43,3,43,684,8,43,1,43,1,43,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,5,44,722,8,44,10,44,12,44,725,9,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,5,44,734,8,44,10,44,12,44,737,9,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,5,44,746,8,44,10,44,12,44,749,9,44,1,44,1,44,
  	1,44,3,44,754,8,44,1,45,1,45,1,45,5,45,759,8,45,10,45,12,45,762,9,45,
  	1,45,1,45,1,45,3,45,767,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,3,46,778,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	5,47,790,8,47,10,47,12,47,793,9,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,48,1,48,3,48,808,8,48,1,49,1,49,1,49,5,49,813,8,
  	49,10,49,12,49,816,9,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,51,1,51,1,51,1,51,3,51,831,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,3,52,841,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,4,54,859,8,54,11,54,12,54,860,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,4,55,873,8,55,11,55,12,55,874,
  	1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,5,57,885,8,57,10,57,12,57,888,
  	9,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,899,8,58,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,923,8,61,10,61,12,61,926,9,61,
  	1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,938,8,62,10,62,
  	12,62,941,9,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
  	1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,961,8,63,1,64,1,64,1,64,1,64,
  	1,64,3,64,968,8,64,1,64,1,64,1,64,3,64,973,8,64,5,64,975,8,64,10,64,12,
  	64,978,9,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,3,65,993,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,
  	66,1004,8,66,10,66,12,66,1007,9,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,
  	3,67,1016,8,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,
  	1028,8,68,10,68,12,68,1031,9,68,1,69,1,69,1,69,1,69,1,69,3,69,1038,8,
  	69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1050,8,70,1,
  	70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1062,8,71,10,71,
  	12,71,1065,9,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,5,72,1076,
  	8,72,10,72,12,72,1079,9,72,1,73,1,73,1,73,1,73,1,73,5,73,1086,8,73,10,
  	73,12,73,1089,9,73,3,73,1091,8,73,1,74,1,74,1,74,1,74,1,74,3,74,1098,
  	8,74,1,74,1,74,1,74,1,74,3,74,1104,8,74,5,74,1106,8,74,10,74,12,74,1109,
  	9,74,1,74,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
  	5,76,1124,8,76,10,76,12,76,1127,9,76,1,77,1,77,1,78,5,78,1132,8,78,10,
  	78,12,78,1135,9,78,1,78,0,0,79,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
  	30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
  	76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,0,8,2,0,15,15,17,19,1,0,32,33,3,0,8,8,20,21,45,47,1,0,37,38,2,
  	0,3,3,63,63,2,0,29,29,52,53,4,0,32,34,50,50,52,53,62,62,2,0,15,15,17,
  	17,1240,0,158,1,0,0,0,2,221,1,0,0,0,4,261,1,0,0,0,6,291,1,0,0,0,8,293,
  	1,0,0,0,10,295,1,0,0,0,12,311,1,0,0,0,14,340,1,0,0,0,16,342,1,0,0,0,18,
  	344,1,0,0,0,20,356,1,0,0,0,22,359,1,0,0,0,24,382,1,0,0,0,26,386,1,0,0,
  	0,28,396,1,0,0,0,30,415,1,0,0,0,32,440,1,0,0,0,34,443,1,0,0,0,36,449,
  	1,0,0,0,38,453,1,0,0,0,40,456,1,0,0,0,42,460,1,0,0,0,44,463,1,0,0,0,46,
  	482,1,0,0,0,48,490,1,0,0,0,50,505,1,0,0,0,52,509,1,0,0,0,54,521,1,0,0,
  	0,56,531,1,0,0,0,58,542,1,0,0,0,60,567,1,0,0,0,62,573,1,0,0,0,64,600,
  	1,0,0,0,66,602,1,0,0,0,68,609,1,0,0,0,70,613,1,0,0,0,72,650,1,0,0,0,74,
  	652,1,0,0,0,76,658,1,0,0,0,78,664,1,0,0,0,80,668,1,0,0,0,82,673,1,0,0,
  	0,84,678,1,0,0,0,86,683,1,0,0,0,88,753,1,0,0,0,90,755,1,0,0,0,92,777,
  	1,0,0,0,94,779,1,0,0,0,96,807,1,0,0,0,98,809,1,0,0,0,100,820,1,0,0,0,
  	102,830,1,0,0,0,104,840,1,0,0,0,106,842,1,0,0,0,108,848,1,0,0,0,110,862,
  	1,0,0,0,112,876,1,0,0,0,114,881,1,0,0,0,116,898,1,0,0,0,118,900,1,0,0,
  	0,120,907,1,0,0,0,122,913,1,0,0,0,124,927,1,0,0,0,126,960,1,0,0,0,128,
  	962,1,0,0,0,130,992,1,0,0,0,132,994,1,0,0,0,134,1011,1,0,0,0,136,1020,
  	1,0,0,0,138,1032,1,0,0,0,140,1042,1,0,0,0,142,1054,1,0,0,0,144,1069,1,
  	0,0,0,146,1090,1,0,0,0,148,1092,1,0,0,0,150,1113,1,0,0,0,152,1115,1,0,
  	0,0,154,1128,1,0,0,0,156,1133,1,0,0,0,158,168,3,156,78,0,159,163,3,2,
  	1,0,160,162,7,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,
  	164,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,166,159,1,0,0,0,167,170,1,
  	0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,180,1,0,0,0,170,168,1,0,0,0,
  	171,175,3,4,2,0,172,174,7,0,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,
  	1,0,0,0,175,176,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,178,171,1,0,0,
  	0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,192,1,0,0,0,182,
  	180,1,0,0,0,183,187,3,6,3,0,184,186,7,0,0,0,185,184,1,0,0,0,186,189,1,
  	0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,
  	190,183,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,204,
  	1,0,0,0,194,192,1,0,0,0,195,199,3,96,48,0,196,198,7,0,0,0,197,196,1,0,
  	0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,203,1,0,0,0,201,
  	199,1,0,0,0,202,195,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,
  	0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,0,0,1,208,1,1,0,0,0,209,
  	210,5,27,0,0,210,211,3,156,78,0,211,212,5,44,0,0,212,213,3,156,78,0,213,
  	214,5,7,0,0,214,215,3,156,78,0,215,222,1,0,0,0,216,217,5,27,0,0,217,218,
  	3,156,78,0,218,219,5,44,0,0,219,220,3,156,78,0,220,222,1,0,0,0,221,209,
  	1,0,0,0,221,216,1,0,0,0,222,3,1,0,0,0,223,224,5,23,0,0,224,227,3,156,
  	78,0,225,228,5,44,0,0,226,228,3,116,58,0,227,225,1,0,0,0,227,226,1,0,
  	0,0,228,229,1,0,0,0,229,230,3,156,78,0,230,231,3,12,6,0,231,232,5,7,0,
  	0,232,233,3,156,78,0,233,262,1,0,0,0,234,235,5,23,0,0,235,238,3,156,78,
  	0,236,239,5,44,0,0,237,239,3,116,58,0,238,236,1,0,0,0,238,237,1,0,0,0,
  	239,240,1,0,0,0,240,241,3,156,78,0,241,242,5,7,0,0,242,243,3,156,78,0,
  	243,262,1,0,0,0,244,245,5,23,0,0,245,248,3,156,78,0,246,249,5,44,0,0,
  	247,249,3,116,58,0,248,246,1,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,
  	251,3,156,78,0,251,252,3,12,6,0,252,262,1,0,0,0,253,254,5,23,0,0,254,
  	257,3,156,78,0,255,258,5,44,0,0,256,258,3,116,58,0,257,255,1,0,0,0,257,
  	256,1,0,0,0,258,259,1,0,0,0,259,260,3,156,78,0,260,262,1,0,0,0,261,223,
  	1,0,0,0,261,234,1,0,0,0,261,244,1,0,0,0,261,253,1,0,0,0,262,5,1,0,0,0,
  	263,264,5,26,0,0,264,268,3,156,78,0,265,266,3,8,4,0,266,267,3,156,78,
  	0,267,269,1,0,0,0,268,265,1,0,0,0,268,269,1,0,0,0,269,272,1,0,0,0,270,
  	273,5,44,0,0,271,273,3,116,58,0,272,270,1,0,0,0,272,271,1,0,0,0,273,274,
  	1,0,0,0,274,275,3,156,78,0,275,276,5,7,0,0,276,277,3,156,78,0,277,292,
  	1,0,0,0,278,279,5,26,0,0,279,283,3,156,78,0,280,281,3,8,4,0,281,282,3,
  	156,78,0,282,284,1,0,0,0,283,280,1,0,0,0,283,284,1,0,0,0,284,287,1,0,
  	0,0,285,288,5,44,0,0,286,288,3,116,58,0,287,285,1,0,0,0,287,286,1,0,0,
  	0,288,289,1,0,0,0,289,290,3,156,78,0,290,292,1,0,0,0,291,263,1,0,0,0,
  	291,278,1,0,0,0,292,7,1,0,0,0,293,294,3,154,77,0,294,9,1,0,0,0,295,296,
  	5,25,0,0,296,297,3,156,78,0,297,298,3,12,6,0,298,299,3,98,49,0,299,300,
  	3,156,78,0,300,11,1,0,0,0,301,308,3,14,7,0,302,303,5,40,0,0,303,304,3,
  	156,78,0,304,305,3,14,7,0,305,307,1,0,0,0,306,302,1,0,0,0,307,310,1,0,
  	0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,
  	301,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,3,156,78,0,314,13,
  	1,0,0,0,315,317,7,1,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,
  	0,318,319,3,156,78,0,319,320,3,16,8,0,320,327,3,156,78,0,321,322,5,34,
  	0,0,322,323,3,156,78,0,323,324,3,18,9,0,324,326,1,0,0,0,325,321,1,0,0,
  	0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,341,1,0,0,0,329,
  	327,1,0,0,0,330,337,3,18,9,0,331,332,5,34,0,0,332,333,3,156,78,0,333,
  	334,3,18,9,0,334,336,1,0,0,0,335,331,1,0,0,0,336,339,1,0,0,0,337,335,
  	1,0,0,0,337,338,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,340,316,1,0,0,
  	0,340,330,1,0,0,0,341,15,1,0,0,0,342,343,3,154,77,0,343,17,1,0,0,0,344,
  	345,5,3,0,0,345,346,3,156,78,0,346,351,3,20,10,0,347,348,5,9,0,0,348,
  	349,3,156,78,0,349,350,3,70,35,0,350,352,1,0,0,0,351,347,1,0,0,0,351,
  	352,1,0,0,0,352,353,1,0,0,0,353,354,5,4,0,0,354,355,3,156,78,0,355,19,
  	1,0,0,0,356,357,3,154,77,0,357,358,3,156,78,0,358,21,1,0,0,0,359,360,
  	5,24,0,0,360,362,3,156,78,0,361,363,3,24,12,0,362,361,1,0,0,0,362,363,
  	1,0,0,0,363,364,1,0,0,0,364,365,5,5,0,0,365,367,3,156,78,0,366,368,3,
  	64,32,0,367,366,1,0,0,0,367,368,1,0,0,0,368,376,1,0,0,0,369,370,5,7,0,
  	0,370,372,3,156,78,0,371,373,3,64,32,0,372,371,1,0,0,0,372,373,1,0,0,
  	0,373,375,1,0,0,0,374,369,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,
  	377,1,0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,380,5,6,0,0,380,381,3,
  	156,78,0,381,23,1,0,0,0,382,383,5,9,0,0,383,384,3,154,77,0,384,385,3,
  	156,78,0,385,25,1,0,0,0,386,393,3,28,14,0,387,388,5,40,0,0,388,389,3,
  	156,78,0,389,390,3,28,14,0,390,392,1,0,0,0,391,387,1,0,0,0,392,395,1,
  	0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,27,1,0,0,0,395,393,1,0,0,0,
  	396,397,3,32,16,0,397,404,3,156,78,0,398,399,3,30,15,0,399,400,3,32,16,
  	0,400,401,3,156,78,0,401,403,1,0,0,0,402,398,1,0,0,0,403,406,1,0,0,0,
  	404,402,1,0,0,0,404,405,1,0,0,0,405,29,1,0,0,0,406,404,1,0,0,0,407,408,
  	5,37,0,0,408,416,3,156,78,0,409,410,5,39,0,0,410,416,3,156,78,0,411,412,
  	5,41,0,0,412,416,3,156,78,0,413,414,5,17,0,0,414,416,3,156,78,0,415,407,
  	1,0,0,0,415,409,1,0,0,0,415,411,1,0,0,0,415,413,1,0,0,0,416,31,1,0,0,
  	0,417,420,3,34,17,0,418,420,3,40,20,0,419,417,1,0,0,0,419,418,1,0,0,0,
  	420,428,1,0,0,0,421,427,5,22,0,0,422,427,3,42,21,0,423,427,3,44,22,0,
  	424,427,3,46,23,0,425,427,3,52,26,0,426,421,1,0,0,0,426,422,1,0,0,0,426,
  	423,1,0,0,0,426,424,1,0,0,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,
  	0,0,0,428,429,1,0,0,0,429,441,1,0,0,0,430,428,1,0,0,0,431,437,5,22,0,
  	0,432,437,3,42,21,0,433,437,3,44,22,0,434,437,3,46,23,0,435,437,3,52,
  	26,0,436,431,1,0,0,0,436,432,1,0,0,0,436,433,1,0,0,0,436,434,1,0,0,0,
  	436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,
  	1,0,0,0,440,419,1,0,0,0,440,436,1,0,0,0,441,33,1,0,0,0,442,444,3,36,18,
  	0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,446,3,38,19,0,446,
  	35,1,0,0,0,447,450,3,154,77,0,448,450,5,11,0,0,449,447,1,0,0,0,449,448,
  	1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,452,5,13,0,0,452,37,1,0,0,
  	0,453,454,3,154,77,0,454,39,1,0,0,0,455,457,3,36,18,0,456,455,1,0,0,0,
  	456,457,1,0,0,0,457,458,1,0,0,0,458,459,5,11,0,0,459,41,1,0,0,0,460,461,
  	5,10,0,0,461,462,3,154,77,0,462,43,1,0,0,0,463,464,5,1,0,0,464,466,3,
  	156,78,0,465,467,3,36,18,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,
  	0,0,0,468,469,3,154,77,0,469,478,3,156,78,0,470,471,7,2,0,0,471,474,3,
  	156,78,0,472,475,3,154,77,0,473,475,5,44,0,0,474,472,1,0,0,0,474,473,
  	1,0,0,0,475,476,1,0,0,0,476,477,3,156,78,0,477,479,1,0,0,0,478,470,1,
  	0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,481,5,2,0,0,481,45,1,0,0,0,
  	482,484,5,9,0,0,483,485,5,9,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,488,
  	1,0,0,0,486,489,3,154,77,0,487,489,3,48,24,0,488,486,1,0,0,0,488,487,
  	1,0,0,0,489,47,1,0,0,0,490,491,5,63,0,0,491,492,3,156,78,0,492,493,3,
  	50,25,0,493,494,5,4,0,0,494,49,1,0,0,0,495,503,5,37,0,0,496,503,5,38,
  	0,0,497,503,5,35,0,0,498,503,5,36,0,0,499,503,5,43,0,0,500,503,5,44,0,
  	0,501,503,3,154,77,0,502,495,1,0,0,0,502,496,1,0,0,0,502,497,1,0,0,0,
  	502,498,1,0,0,0,502,499,1,0,0,0,502,500,1,0,0,0,502,501,1,0,0,0,503,504,
  	1,0,0,0,504,506,3,156,78,0,505,502,1,0,0,0,506,507,1,0,0,0,507,505,1,
  	0,0,0,507,508,1,0,0,0,508,51,1,0,0,0,509,510,5,42,0,0,510,511,3,156,78,
  	0,511,512,3,54,27,0,512,513,3,156,78,0,513,514,5,4,0,0,514,53,1,0,0,0,
  	515,522,3,34,17,0,516,522,3,40,20,0,517,522,5,22,0,0,518,522,3,42,21,
  	0,519,522,3,44,22,0,520,522,3,46,23,0,521,515,1,0,0,0,521,516,1,0,0,0,
  	521,517,1,0,0,0,521,518,1,0,0,0,521,519,1,0,0,0,521,520,1,0,0,0,522,55,
  	1,0,0,0,523,524,5,12,0,0,524,532,3,156,78,0,525,526,5,40,0,0,526,532,
  	3,156,78,0,527,528,5,17,0,0,528,532,3,156,78,0,529,530,5,8,0,0,530,532,
  	3,156,78,0,531,523,1,0,0,0,531,525,1,0,0,0,531,527,1,0,0,0,531,529,1,
  	0,0,0,532,57,1,0,0,0,533,534,3,154,77,0,534,535,3,156,78,0,535,543,1,
  	0,0,0,536,537,5,60,0,0,537,543,3,156,78,0,538,539,5,11,0,0,539,543,3,
  	154,77,0,540,541,5,14,0,0,541,543,3,154,77,0,542,533,1,0,0,0,542,536,
  	1,0,0,0,542,538,1,0,0,0,542,540,1,0,0,0,543,59,1,0,0,0,544,545,3,26,13,
  	0,545,546,5,5,0,0,546,548,3,156,78,0,547,549,3,62,31,0,548,547,1,0,0,
  	0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,5,6,0,0,551,552,3,156,78,0,
  	552,568,1,0,0,0,553,555,3,88,44,0,554,553,1,0,0,0,555,558,1,0,0,0,556,
  	554,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,556,1,0,0,0,559,560,5,
  	5,0,0,560,562,3,156,78,0,561,563,3,62,31,0,562,561,1,0,0,0,562,563,1,
  	0,0,0,563,564,1,0,0,0,564,565,5,6,0,0,565,566,3,156,78,0,566,568,1,0,
  	0,0,567,544,1,0,0,0,567,556,1,0,0,0,568,61,1,0,0,0,569,570,5,7,0,0,570,
  	572,3,156,78,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,
  	1,0,0,0,574,576,1,0,0,0,575,573,1,0,0,0,576,577,3,64,32,0,577,585,3,156,
  	78,0,578,579,5,7,0,0,579,581,3,156,78,0,580,582,3,64,32,0,581,580,1,0,
  	0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,578,1,0,0,0,584,587,1,0,0,0,585,
  	583,1,0,0,0,585,586,1,0,0,0,586,63,1,0,0,0,587,585,1,0,0,0,588,589,3,
  	58,29,0,589,590,5,9,0,0,590,591,3,156,78,0,591,593,3,70,35,0,592,594,
  	3,66,33,0,593,592,1,0,0,0,593,594,1,0,0,0,594,601,1,0,0,0,595,596,3,58,
  	29,0,596,597,5,9,0,0,597,598,3,156,78,0,598,599,3,68,34,0,599,601,1,0,
  	0,0,600,588,1,0,0,0,600,595,1,0,0,0,601,65,1,0,0,0,602,603,5,28,0,0,603,
  	604,3,156,78,0,604,67,1,0,0,0,605,610,3,88,44,0,606,610,3,94,47,0,607,
  	608,5,59,0,0,608,610,3,156,78,0,609,605,1,0,0,0,609,606,1,0,0,0,609,607,
  	1,0,0,0,610,611,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,69,1,0,0,
  	0,613,620,3,72,36,0,614,616,3,56,28,0,615,614,1,0,0,0,615,616,1,0,0,0,
  	616,617,1,0,0,0,617,619,3,72,36,0,618,615,1,0,0,0,619,622,1,0,0,0,620,
  	618,1,0,0,0,620,621,1,0,0,0,621,71,1,0,0,0,622,620,1,0,0,0,623,624,3,
  	80,40,0,624,625,3,156,78,0,625,651,1,0,0,0,626,627,3,82,41,0,627,628,
  	3,156,78,0,628,651,1,0,0,0,629,630,3,84,42,0,630,631,3,156,78,0,631,651,
  	1,0,0,0,632,633,5,44,0,0,633,651,3,156,78,0,634,635,5,31,0,0,635,651,
  	3,156,78,0,636,637,3,154,77,0,637,638,3,156,78,0,638,651,1,0,0,0,639,
  	651,3,118,59,0,640,641,3,116,58,0,641,642,3,156,78,0,642,651,1,0,0,0,
  	643,651,3,78,39,0,644,651,3,120,60,0,645,651,3,74,37,0,646,647,3,86,43,
  	0,647,648,3,156,78,0,648,651,1,0,0,0,649,651,3,76,38,0,650,623,1,0,0,
  	0,650,626,1,0,0,0,650,629,1,0,0,0,650,632,1,0,0,0,650,634,1,0,0,0,650,
  	636,1,0,0,0,650,639,1,0,0,0,650,640,1,0,0,0,650,643,1,0,0,0,650,644,1,
  	0,0,0,650,645,1,0,0,0,650,646,1,0,0,0,650,649,1,0,0,0,651,73,1,0,0,0,
  	652,653,5,63,0,0,653,654,3,156,78,0,654,655,3,70,35,0,655,656,5,4,0,0,
  	656,657,3,156,78,0,657,75,1,0,0,0,658,659,5,58,0,0,659,660,3,156,78,0,
  	660,661,3,70,35,0,661,662,5,4,0,0,662,663,3,156,78,0,663,77,1,0,0,0,664,
  	665,5,22,0,0,665,666,3,156,78,0,666,79,1,0,0,0,667,669,7,3,0,0,668,667,
  	1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,671,5,43,0,0,671,81,1,0,0,
  	0,672,674,7,3,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,
  	676,5,29,0,0,676,83,1,0,0,0,677,679,7,3,0,0,678,677,1,0,0,0,678,679,1,
  	0,0,0,679,680,1,0,0,0,680,681,5,35,0,0,681,85,1,0,0,0,682,684,7,3,0,0,
  	683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,36,0,0,686,
  	87,1,0,0,0,687,688,3,154,77,0,688,689,3,156,78,0,689,754,1,0,0,0,690,
  	691,3,80,40,0,691,692,3,156,78,0,692,754,1,0,0,0,693,694,3,82,41,0,694,
  	695,3,156,78,0,695,754,1,0,0,0,696,697,3,84,42,0,697,698,3,156,78,0,698,
  	754,1,0,0,0,699,700,3,86,43,0,700,701,3,156,78,0,701,754,1,0,0,0,702,
  	703,5,44,0,0,703,754,3,156,78,0,704,705,3,116,58,0,705,706,3,156,78,0,
  	706,754,1,0,0,0,707,708,5,22,0,0,708,754,3,156,78,0,709,710,5,31,0,0,
  	710,754,3,156,78,0,711,712,5,20,0,0,712,754,3,156,78,0,713,714,5,21,0,
  	0,714,754,3,156,78,0,715,716,5,9,0,0,716,754,3,156,78,0,717,718,5,63,
  	0,0,718,723,3,156,78,0,719,722,3,88,44,0,720,722,3,92,46,0,721,719,1,
  	0,0,0,721,720,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,
  	724,726,1,0,0,0,725,723,1,0,0,0,726,727,5,4,0,0,727,728,3,156,78,0,728,
  	754,1,0,0,0,729,730,5,3,0,0,730,735,3,156,78,0,731,734,3,88,44,0,732,
  	734,3,92,46,0,733,731,1,0,0,0,733,732,1,0,0,0,734,737,1,0,0,0,735,733,
  	1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,735,1,0,0,0,738,739,5,4,0,
  	0,739,740,3,156,78,0,740,754,1,0,0,0,741,742,5,1,0,0,742,747,3,156,78,
  	0,743,746,3,88,44,0,744,746,3,92,46,0,745,743,1,0,0,0,745,744,1,0,0,0,
  	746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,747,
  	1,0,0,0,750,751,5,2,0,0,751,752,3,156,78,0,752,754,1,0,0,0,753,687,1,
  	0,0,0,753,690,1,0,0,0,753,693,1,0,0,0,753,696,1,0,0,0,753,699,1,0,0,0,
  	753,702,1,0,0,0,753,704,1,0,0,0,753,707,1,0,0,0,753,709,1,0,0,0,753,711,
  	1,0,0,0,753,713,1,0,0,0,753,715,1,0,0,0,753,717,1,0,0,0,753,729,1,0,0,
  	0,753,741,1,0,0,0,754,89,1,0,0,0,755,756,5,59,0,0,756,760,3,156,78,0,
  	757,759,3,88,44,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,
  	761,1,0,0,0,761,766,1,0,0,0,762,760,1,0,0,0,763,767,3,94,47,0,764,765,
  	5,7,0,0,765,767,3,156,78,0,766,763,1,0,0,0,766,764,1,0,0,0,767,91,1,0,
  	0,0,768,778,3,94,47,0,769,770,5,59,0,0,770,778,3,156,78,0,771,772,5,7,
  	0,0,772,778,3,156,78,0,773,774,5,18,0,0,774,778,3,156,78,0,775,776,5,
  	19,0,0,776,778,3,156,78,0,777,768,1,0,0,0,777,769,1,0,0,0,777,771,1,0,
  	0,0,777,773,1,0,0,0,777,775,1,0,0,0,778,93,1,0,0,0,779,780,5,5,0,0,780,
  	791,3,156,78,0,781,790,3,62,31,0,782,790,3,96,48,0,783,790,3,88,44,0,
  	784,790,3,94,47,0,785,786,5,59,0,0,786,790,3,156,78,0,787,788,5,7,0,0,
  	788,790,3,156,78,0,789,781,1,0,0,0,789,782,1,0,0,0,789,783,1,0,0,0,789,
  	784,1,0,0,0,789,785,1,0,0,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,1,
  	0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,791,1,0,0,0,794,795,5,6,0,0,
  	795,796,3,156,78,0,796,95,1,0,0,0,797,808,3,60,30,0,798,808,3,10,5,0,
  	799,808,3,22,11,0,800,808,3,128,64,0,801,808,3,132,66,0,802,808,3,100,
  	50,0,803,808,3,138,69,0,804,808,3,140,70,0,805,808,3,142,71,0,806,808,
  	3,90,45,0,807,797,1,0,0,0,807,798,1,0,0,0,807,799,1,0,0,0,807,800,1,0,
  	0,0,807,801,1,0,0,0,807,802,1,0,0,0,807,803,1,0,0,0,807,804,1,0,0,0,807,
  	805,1,0,0,0,807,806,1,0,0,0,808,97,1,0,0,0,809,810,5,5,0,0,810,814,3,
  	156,78,0,811,813,3,96,48,0,812,811,1,0,0,0,813,816,1,0,0,0,814,812,1,
  	0,0,0,814,815,1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,5,6,0,0,
  	818,819,3,156,78,0,819,99,1,0,0,0,820,821,5,49,0,0,821,822,3,156,78,0,
  	822,823,3,102,51,0,823,824,3,156,78,0,824,825,3,98,49,0,825,101,1,0,0,
  	0,826,831,3,106,53,0,827,831,3,108,54,0,828,831,3,110,55,0,829,831,3,
  	104,52,0,830,826,1,0,0,0,830,827,1,0,0,0,830,828,1,0,0,0,830,829,1,0,
  	0,0,831,103,1,0,0,0,832,833,5,3,0,0,833,834,3,156,78,0,834,835,3,102,
  	51,0,835,836,3,156,78,0,836,837,5,4,0,0,837,841,1,0,0,0,838,841,3,112,
  	56,0,839,841,3,114,57,0,840,832,1,0,0,0,840,838,1,0,0,0,840,839,1,0,0,
  	0,841,105,1,0,0,0,842,843,5,33,0,0,843,844,3,156,78,0,844,845,5,17,0,
  	0,845,846,3,156,78,0,846,847,3,104,52,0,847,107,1,0,0,0,848,858,3,104,
  	52,0,849,850,3,156,78,0,850,851,5,17,0,0,851,852,3,156,78,0,852,853,5,
  	34,0,0,853,854,3,156,78,0,854,855,5,17,0,0,855,856,3,156,78,0,856,857,
  	3,104,52,0,857,859,1,0,0,0,858,849,1,0,0,0,859,860,1,0,0,0,860,858,1,
  	0,0,0,860,861,1,0,0,0,861,109,1,0,0,0,862,872,3,104,52,0,863,864,3,156,
  	78,0,864,865,5,17,0,0,865,866,3,156,78,0,866,867,5,50,0,0,867,868,3,156,
  	78,0,868,869,5,17,0,0,869,870,3,156,78,0,870,871,3,104,52,0,871,873,1,
  	0,0,0,872,863,1,0,0,0,873,874,1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,0,
  	875,111,1,0,0,0,876,877,5,3,0,0,877,878,3,156,78,0,878,879,3,64,32,0,
  	879,880,5,4,0,0,880,113,1,0,0,0,881,886,7,4,0,0,882,885,3,88,44,0,883,
  	885,3,92,46,0,884,882,1,0,0,0,884,883,1,0,0,0,885,888,1,0,0,0,886,884,
  	1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,886,1,0,0,0,889,890,5,4,0,
  	0,890,115,1,0,0,0,891,892,5,30,0,0,892,893,3,156,78,0,893,894,5,44,0,
  	0,894,895,3,156,78,0,895,896,5,4,0,0,896,899,1,0,0,0,897,899,5,16,0,0,
  	898,891,1,0,0,0,898,897,1,0,0,0,899,117,1,0,0,0,900,901,5,61,0,0,901,
  	902,3,156,78,0,902,903,5,60,0,0,903,904,3,156,78,0,904,905,5,4,0,0,905,
  	906,3,156,78,0,906,119,1,0,0,0,907,908,5,54,0,0,908,909,3,156,78,0,909,
  	910,3,122,61,0,910,911,5,4,0,0,911,912,3,156,78,0,912,121,1,0,0,0,913,
  	924,3,124,62,0,914,915,5,17,0,0,915,916,3,156,78,0,916,917,7,3,0,0,917,
  	918,3,156,78,0,918,919,5,17,0,0,919,920,3,156,78,0,920,921,3,124,62,0,
  	921,923,1,0,0,0,922,914,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,
  	1,0,0,0,925,123,1,0,0,0,926,924,1,0,0,0,927,939,3,126,63,0,928,929,5,
  	11,0,0,929,930,3,156,78,0,930,931,3,126,63,0,931,938,1,0,0,0,932,933,
  	5,12,0,0,933,934,3,156,78,0,934,935,3,80,40,0,935,936,3,156,78,0,936,
  	938,1,0,0,0,937,928,1,0,0,0,937,932,1,0,0,0,938,941,1,0,0,0,939,937,1,
  	0,0,0,939,940,1,0,0,0,940,125,1,0,0,0,941,939,1,0,0,0,942,943,3,80,40,
  	0,943,944,3,156,78,0,944,961,1,0,0,0,945,946,3,84,42,0,946,947,3,156,
  	78,0,947,961,1,0,0,0,948,949,3,86,43,0,949,950,3,156,78,0,950,961,1,0,
  	0,0,951,952,3,82,41,0,952,953,3,156,78,0,953,961,1,0,0,0,954,955,5,3,
  	0,0,955,956,3,156,78,0,956,957,3,122,61,0,957,958,5,4,0,0,958,959,3,156,
  	78,0,959,961,1,0,0,0,960,942,1,0,0,0,960,945,1,0,0,0,960,948,1,0,0,0,
  	960,951,1,0,0,0,960,954,1,0,0,0,961,127,1,0,0,0,962,963,5,48,0,0,963,
  	964,3,156,78,0,964,965,5,5,0,0,965,967,3,156,78,0,966,968,3,130,65,0,
  	967,966,1,0,0,0,967,968,1,0,0,0,968,976,1,0,0,0,969,970,5,7,0,0,970,972,
  	3,156,78,0,971,973,3,130,65,0,972,971,1,0,0,0,972,973,1,0,0,0,973,975,
  	1,0,0,0,974,969,1,0,0,0,975,978,1,0,0,0,976,974,1,0,0,0,976,977,1,0,0,
  	0,977,979,1,0,0,0,978,976,1,0,0,0,979,980,5,6,0,0,980,981,3,156,78,0,
  	981,129,1,0,0,0,982,983,3,58,29,0,983,984,5,9,0,0,984,985,3,156,78,0,
  	985,986,3,70,35,0,986,993,1,0,0,0,987,988,3,58,29,0,988,989,5,9,0,0,989,
  	990,3,156,78,0,990,991,3,68,34,0,991,993,1,0,0,0,992,982,1,0,0,0,992,
  	987,1,0,0,0,993,131,1,0,0,0,994,995,5,51,0,0,995,996,3,156,78,0,996,997,
  	5,17,0,0,997,998,3,156,78,0,998,999,3,154,77,0,999,1000,3,156,78,0,1000,
  	1001,5,5,0,0,1001,1005,3,156,78,0,1002,1004,3,134,67,0,1003,1002,1,0,
  	0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1008,1,
  	0,0,0,1007,1005,1,0,0,0,1008,1009,5,6,0,0,1009,1010,3,156,78,0,1010,133,
  	1,0,0,0,1011,1012,3,136,68,0,1012,1013,5,5,0,0,1013,1015,3,156,78,0,1014,
  	1016,3,62,31,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,
  	1017,1018,5,6,0,0,1018,1019,3,156,78,0,1019,135,1,0,0,0,1020,1021,7,5,
  	0,0,1021,1029,3,156,78,0,1022,1023,5,40,0,0,1023,1024,3,156,78,0,1024,
  	1025,7,5,0,0,1025,1026,3,156,78,0,1026,1028,1,0,0,0,1027,1022,1,0,0,0,
  	1028,1031,1,0,0,0,1029,1027,1,0,0,0,1029,1030,1,0,0,0,1030,137,1,0,0,
  	0,1031,1029,1,0,0,0,1032,1033,5,55,0,0,1033,1034,3,156,78,0,1034,1035,
  	5,5,0,0,1035,1037,3,156,78,0,1036,1038,3,62,31,0,1037,1036,1,0,0,0,1037,
  	1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,5,6,0,0,1040,1041,3,156,78,0,
  	1041,139,1,0,0,0,1042,1043,5,56,0,0,1043,1044,3,156,78,0,1044,1045,3,
  	154,77,0,1045,1046,3,156,78,0,1046,1047,5,5,0,0,1047,1049,3,156,78,0,
  	1048,1050,3,62,31,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,
  	0,0,1051,1052,5,6,0,0,1052,1053,3,156,78,0,1053,141,1,0,0,0,1054,1055,
  	5,57,0,0,1055,1056,3,156,78,0,1056,1057,3,144,72,0,1057,1058,3,156,78,
  	0,1058,1059,5,5,0,0,1059,1063,3,156,78,0,1060,1062,3,148,74,0,1061,1060,
  	1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1066,
  	1,0,0,0,1065,1063,1,0,0,0,1066,1067,5,6,0,0,1067,1068,3,156,78,0,1068,
  	143,1,0,0,0,1069,1077,3,146,73,0,1070,1071,3,156,78,0,1071,1072,5,40,
  	0,0,1072,1073,3,156,78,0,1073,1074,3,146,73,0,1074,1076,1,0,0,0,1075,
  	1070,1,0,0,0,1076,1079,1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,
  	145,1,0,0,0,1079,1077,1,0,0,0,1080,1091,5,44,0,0,1081,1087,3,154,77,0,
  	1082,1083,3,156,78,0,1083,1084,3,154,77,0,1084,1086,1,0,0,0,1085,1082,
  	1,0,0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1091,
  	1,0,0,0,1089,1087,1,0,0,0,1090,1080,1,0,0,0,1090,1081,1,0,0,0,1091,147,
  	1,0,0,0,1092,1093,3,150,75,0,1093,1094,3,156,78,0,1094,1095,5,5,0,0,1095,
  	1097,3,156,78,0,1096,1098,3,152,76,0,1097,1096,1,0,0,0,1097,1098,1,0,
  	0,0,1098,1107,1,0,0,0,1099,1100,3,156,78,0,1100,1101,5,7,0,0,1101,1103,
  	3,156,78,0,1102,1104,3,152,76,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,
  	1106,1,0,0,0,1105,1099,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,
  	1108,1,0,0,0,1108,1110,1,0,0,0,1109,1107,1,0,0,0,1110,1111,5,6,0,0,1111,
  	1112,3,156,78,0,1112,149,1,0,0,0,1113,1114,5,59,0,0,1114,151,1,0,0,0,
  	1115,1116,3,154,77,0,1116,1117,3,156,78,0,1117,1118,5,9,0,0,1118,1119,
  	3,156,78,0,1119,1125,3,80,40,0,1120,1121,3,156,78,0,1121,1122,3,80,40,
  	0,1122,1124,1,0,0,0,1123,1120,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,
  	0,0,1125,1126,1,0,0,0,1126,153,1,0,0,0,1127,1125,1,0,0,0,1128,1129,7,
  	6,0,0,1129,155,1,0,0,0,1130,1132,7,7,0,0,1131,1130,1,0,0,0,1132,1135,
  	1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,157,1,0,0,0,1135,1133,
  	1,0,0,0,113,163,168,175,180,187,192,199,204,221,227,238,248,257,261,268,
  	272,283,287,291,308,311,316,327,337,340,351,362,367,372,376,393,404,415,
  	419,426,428,436,438,440,443,449,456,466,474,478,484,488,502,507,521,531,
  	542,548,556,562,567,573,581,585,593,600,609,611,615,620,650,668,673,678,
  	683,721,723,733,735,745,747,753,760,766,777,789,791,807,814,830,840,860,
  	874,884,886,898,924,937,939,960,967,972,976,992,1005,1015,1029,1037,1049,
  	1063,1077,1087,1090,1097,1103,1107,1125,1133
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  css3parserParserStaticData = std::move(staticData);
}

}

css3Parser::css3Parser(TokenStream *input) : css3Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

css3Parser::css3Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  css3Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *css3parserParserStaticData->atn, css3parserParserStaticData->decisionToDFA, css3parserParserStaticData->sharedContextCache, options);
}

css3Parser::~css3Parser() {
  delete _interpreter;
}

const atn::ATN& css3Parser::getATN() const {
  return *css3parserParserStaticData->atn;
}

std::string css3Parser::getGrammarFileName() const {
  return "css3Parser.g4";
}

const std::vector<std::string>& css3Parser::getRuleNames() const {
  return css3parserParserStaticData->ruleNames;
}

const dfa::Vocabulary& css3Parser::getVocabulary() const {
  return css3parserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView css3Parser::getSerializedATN() const {
  return css3parserParserStaticData->serializedATN;
}


//----------------- StylesheetContext ------------------------------------------------------------------

css3Parser::StylesheetContext::StylesheetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::WsContext* css3Parser::StylesheetContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::StylesheetContext::EOF() {
  return getToken(css3Parser::EOF, 0);
}

std::vector<css3Parser::CharsetContext *> css3Parser::StylesheetContext::charset() {
  return getRuleContexts<css3Parser::CharsetContext>();
}

css3Parser::CharsetContext* css3Parser::StylesheetContext::charset(size_t i) {
  return getRuleContext<css3Parser::CharsetContext>(i);
}

std::vector<css3Parser::ImportsContext *> css3Parser::StylesheetContext::imports() {
  return getRuleContexts<css3Parser::ImportsContext>();
}

css3Parser::ImportsContext* css3Parser::StylesheetContext::imports(size_t i) {
  return getRuleContext<css3Parser::ImportsContext>(i);
}

std::vector<css3Parser::Namespace_Context *> css3Parser::StylesheetContext::namespace_() {
  return getRuleContexts<css3Parser::Namespace_Context>();
}

css3Parser::Namespace_Context* css3Parser::StylesheetContext::namespace_(size_t i) {
  return getRuleContext<css3Parser::Namespace_Context>(i);
}

std::vector<css3Parser::NestedStatementContext *> css3Parser::StylesheetContext::nestedStatement() {
  return getRuleContexts<css3Parser::NestedStatementContext>();
}

css3Parser::NestedStatementContext* css3Parser::StylesheetContext::nestedStatement(size_t i) {
  return getRuleContext<css3Parser::NestedStatementContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Comment() {
  return getTokens(css3Parser::Comment);
}

tree::TerminalNode* css3Parser::StylesheetContext::Comment(size_t i) {
  return getToken(css3Parser::Comment, i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::StylesheetContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Cdo() {
  return getTokens(css3Parser::Cdo);
}

tree::TerminalNode* css3Parser::StylesheetContext::Cdo(size_t i) {
  return getToken(css3Parser::Cdo, i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Cdc() {
  return getTokens(css3Parser::Cdc);
}

tree::TerminalNode* css3Parser::StylesheetContext::Cdc(size_t i) {
  return getToken(css3Parser::Cdc, i);
}


size_t css3Parser::StylesheetContext::getRuleIndex() const {
  return css3Parser::RuleStylesheet;
}

void css3Parser::StylesheetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStylesheet(this);
}

void css3Parser::StylesheetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStylesheet(this);
}

css3Parser::StylesheetContext* css3Parser::stylesheet() {
  StylesheetContext *_localctx = _tracker.createInstance<StylesheetContext>(_ctx, getState());
  enterRule(_localctx, 0, css3Parser::RuleStylesheet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(158);
    ws();
    setState(168);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Charset) {
      setState(159);
      charset();
      setState(163);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(160);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(165);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(170);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(180);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Import) {
      setState(171);
      imports();
      setState(175);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(172);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(177);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(182);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(192);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Namespace) {
      setState(183);
      namespace_();
      setState(187);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(184);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(189);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(194);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(204);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3765259427856175574) != 0)) {
      setState(195);
      nestedStatement();
      setState(199);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(196);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(201);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(206);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(207);
    match(css3Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharsetContext ------------------------------------------------------------------

css3Parser::CharsetContext::CharsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::CharsetContext::getRuleIndex() const {
  return css3Parser::RuleCharset;
}

void css3Parser::CharsetContext::copyFrom(CharsetContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadCharsetContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadCharsetContext::Charset() {
  return getToken(css3Parser::Charset, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BadCharsetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BadCharsetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::BadCharsetContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::BadCharsetContext::BadCharsetContext(CharsetContext *ctx) { copyFrom(ctx); }

void css3Parser::BadCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadCharset(this);
}
void css3Parser::BadCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadCharset(this);
}
//----------------- GoodCharsetContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodCharsetContext::Charset() {
  return getToken(css3Parser::Charset, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GoodCharsetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GoodCharsetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::GoodCharsetContext::String_() {
  return getToken(css3Parser::String_, 0);
}

tree::TerminalNode* css3Parser::GoodCharsetContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

css3Parser::GoodCharsetContext::GoodCharsetContext(CharsetContext *ctx) { copyFrom(ctx); }

void css3Parser::GoodCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodCharset(this);
}
void css3Parser::GoodCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodCharset(this);
}
css3Parser::CharsetContext* css3Parser::charset() {
  CharsetContext *_localctx = _tracker.createInstance<CharsetContext>(_ctx, getState());
  enterRule(_localctx, 2, css3Parser::RuleCharset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(221);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::GoodCharsetContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(209);
      match(css3Parser::Charset);
      setState(210);
      ws();
      setState(211);
      match(css3Parser::String_);
      setState(212);
      ws();
      setState(213);
      match(css3Parser::SemiColon);
      setState(214);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::BadCharsetContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(216);
      match(css3Parser::Charset);
      setState(217);
      ws();
      setState(218);
      match(css3Parser::String_);
      setState(219);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsContext ------------------------------------------------------------------

css3Parser::ImportsContext::ImportsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::ImportsContext::getRuleIndex() const {
  return css3Parser::RuleImports;
}

void css3Parser::ImportsContext::copyFrom(ImportsContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadImportContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadImportContext::Import() {
  return getToken(css3Parser::Import, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BadImportContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BadImportContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaQueryListContext* css3Parser::BadImportContext::mediaQueryList() {
  return getRuleContext<css3Parser::MediaQueryListContext>(0);
}

tree::TerminalNode* css3Parser::BadImportContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::BadImportContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::BadImportContext::BadImportContext(ImportsContext *ctx) { copyFrom(ctx); }

void css3Parser::BadImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadImport(this);
}
void css3Parser::BadImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadImport(this);
}
//----------------- GoodImportContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodImportContext::Import() {
  return getToken(css3Parser::Import, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GoodImportContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GoodImportContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaQueryListContext* css3Parser::GoodImportContext::mediaQueryList() {
  return getRuleContext<css3Parser::MediaQueryListContext>(0);
}

tree::TerminalNode* css3Parser::GoodImportContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

tree::TerminalNode* css3Parser::GoodImportContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::GoodImportContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::GoodImportContext::GoodImportContext(ImportsContext *ctx) { copyFrom(ctx); }

void css3Parser::GoodImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodImport(this);
}
void css3Parser::GoodImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodImport(this);
}
css3Parser::ImportsContext* css3Parser::imports() {
  ImportsContext *_localctx = _tracker.createInstance<ImportsContext>(_ctx, getState());
  enterRule(_localctx, 4, css3Parser::RuleImports);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::GoodImportContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(223);
      match(css3Parser::Import);
      setState(224);
      ws();
      setState(227);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(225);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(226);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(229);
      ws();
      setState(230);
      mediaQueryList();
      setState(231);
      match(css3Parser::SemiColon);
      setState(232);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::GoodImportContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(234);
      match(css3Parser::Import);
      setState(235);
      ws();
      setState(238);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(236);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(237);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(240);
      ws();
      setState(241);
      match(css3Parser::SemiColon);
      setState(242);
      ws();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<css3Parser::BadImportContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(244);
      match(css3Parser::Import);
      setState(245);
      ws();
      setState(248);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(246);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(247);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(250);
      ws();
      setState(251);
      mediaQueryList();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<css3Parser::BadImportContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(253);
      match(css3Parser::Import);
      setState(254);
      ws();
      setState(257);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(255);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(256);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(259);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_Context ------------------------------------------------------------------

css3Parser::Namespace_Context::Namespace_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::Namespace_Context::getRuleIndex() const {
  return css3Parser::RuleNamespace_;
}

void css3Parser::Namespace_Context::copyFrom(Namespace_Context *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GoodNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodNamespaceContext::Namespace() {
  return getToken(css3Parser::Namespace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GoodNamespaceContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GoodNamespaceContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::GoodNamespaceContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

tree::TerminalNode* css3Parser::GoodNamespaceContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::GoodNamespaceContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::NamespacePrefixContext* css3Parser::GoodNamespaceContext::namespacePrefix() {
  return getRuleContext<css3Parser::NamespacePrefixContext>(0);
}

css3Parser::GoodNamespaceContext::GoodNamespaceContext(Namespace_Context *ctx) { copyFrom(ctx); }

void css3Parser::GoodNamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodNamespace(this);
}
void css3Parser::GoodNamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodNamespace(this);
}
//----------------- BadNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadNamespaceContext::Namespace() {
  return getToken(css3Parser::Namespace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BadNamespaceContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BadNamespaceContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::BadNamespaceContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::BadNamespaceContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::NamespacePrefixContext* css3Parser::BadNamespaceContext::namespacePrefix() {
  return getRuleContext<css3Parser::NamespacePrefixContext>(0);
}

css3Parser::BadNamespaceContext::BadNamespaceContext(Namespace_Context *ctx) { copyFrom(ctx); }

void css3Parser::BadNamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadNamespace(this);
}
void css3Parser::BadNamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadNamespace(this);
}
css3Parser::Namespace_Context* css3Parser::namespace_() {
  Namespace_Context *_localctx = _tracker.createInstance<Namespace_Context>(_ctx, getState());
  enterRule(_localctx, 6, css3Parser::RuleNamespace_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(291);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::GoodNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(263);
      match(css3Parser::Namespace);
      setState(264);
      ws();
      setState(268);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4626322747281113088) != 0)) {
        setState(265);
        namespacePrefix();
        setState(266);
        ws();
      }
      setState(272);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(270);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(271);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(274);
      ws();
      setState(275);
      match(css3Parser::SemiColon);
      setState(276);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::BadNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(278);
      match(css3Parser::Namespace);
      setState(279);
      ws();
      setState(283);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4626322747281113088) != 0)) {
        setState(280);
        namespacePrefix();
        setState(281);
        ws();
      }
      setState(287);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(285);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(286);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(289);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacePrefixContext ------------------------------------------------------------------

css3Parser::NamespacePrefixContext::NamespacePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::NamespacePrefixContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::NamespacePrefixContext::getRuleIndex() const {
  return css3Parser::RuleNamespacePrefix;
}

void css3Parser::NamespacePrefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespacePrefix(this);
}

void css3Parser::NamespacePrefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespacePrefix(this);
}

css3Parser::NamespacePrefixContext* css3Parser::namespacePrefix() {
  NamespacePrefixContext *_localctx = _tracker.createInstance<NamespacePrefixContext>(_ctx, getState());
  enterRule(_localctx, 8, css3Parser::RuleNamespacePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(293);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaContext ------------------------------------------------------------------

css3Parser::MediaContext::MediaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::MediaContext::Media() {
  return getToken(css3Parser::Media, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::MediaContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaQueryListContext* css3Parser::MediaContext::mediaQueryList() {
  return getRuleContext<css3Parser::MediaQueryListContext>(0);
}

css3Parser::GroupRuleBodyContext* css3Parser::MediaContext::groupRuleBody() {
  return getRuleContext<css3Parser::GroupRuleBodyContext>(0);
}


size_t css3Parser::MediaContext::getRuleIndex() const {
  return css3Parser::RuleMedia;
}

void css3Parser::MediaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMedia(this);
}

void css3Parser::MediaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMedia(this);
}

css3Parser::MediaContext* css3Parser::media() {
  MediaContext *_localctx = _tracker.createInstance<MediaContext>(_ctx, getState());
  enterRule(_localctx, 10, css3Parser::RuleMedia);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(295);
    match(css3Parser::Media);
    setState(296);
    ws();
    setState(297);
    mediaQueryList();
    setState(298);
    groupRuleBody();
    setState(299);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaQueryListContext ------------------------------------------------------------------

css3Parser::MediaQueryListContext::MediaQueryListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::MediaQueryListContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaQueryListContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::MediaQueryContext *> css3Parser::MediaQueryListContext::mediaQuery() {
  return getRuleContexts<css3Parser::MediaQueryContext>();
}

css3Parser::MediaQueryContext* css3Parser::MediaQueryListContext::mediaQuery(size_t i) {
  return getRuleContext<css3Parser::MediaQueryContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::MediaQueryListContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::MediaQueryListContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}


size_t css3Parser::MediaQueryListContext::getRuleIndex() const {
  return css3Parser::RuleMediaQueryList;
}

void css3Parser::MediaQueryListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaQueryList(this);
}

void css3Parser::MediaQueryListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaQueryList(this);
}

css3Parser::MediaQueryListContext* css3Parser::mediaQueryList() {
  MediaQueryListContext *_localctx = _tracker.createInstance<MediaQueryListContext>(_ctx, getState());
  enterRule(_localctx, 12, css3Parser::RuleMediaQueryList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(311);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      setState(301);
      mediaQuery();
      setState(308);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == css3Parser::Comma) {
        setState(302);
        match(css3Parser::Comma);
        setState(303);
        ws();
        setState(304);
        mediaQuery();
        setState(310);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(313);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaQueryContext ------------------------------------------------------------------

css3Parser::MediaQueryContext::MediaQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::MediaQueryContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaQueryContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaTypeContext* css3Parser::MediaQueryContext::mediaType() {
  return getRuleContext<css3Parser::MediaTypeContext>(0);
}

std::vector<tree::TerminalNode *> css3Parser::MediaQueryContext::And() {
  return getTokens(css3Parser::And);
}

tree::TerminalNode* css3Parser::MediaQueryContext::And(size_t i) {
  return getToken(css3Parser::And, i);
}

std::vector<css3Parser::MediaExpressionContext *> css3Parser::MediaQueryContext::mediaExpression() {
  return getRuleContexts<css3Parser::MediaExpressionContext>();
}

css3Parser::MediaExpressionContext* css3Parser::MediaQueryContext::mediaExpression(size_t i) {
  return getRuleContext<css3Parser::MediaExpressionContext>(i);
}

tree::TerminalNode* css3Parser::MediaQueryContext::MediaOnly() {
  return getToken(css3Parser::MediaOnly, 0);
}

tree::TerminalNode* css3Parser::MediaQueryContext::Not() {
  return getToken(css3Parser::Not, 0);
}


size_t css3Parser::MediaQueryContext::getRuleIndex() const {
  return css3Parser::RuleMediaQuery;
}

void css3Parser::MediaQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaQuery(this);
}

void css3Parser::MediaQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaQuery(this);
}

css3Parser::MediaQueryContext* css3Parser::mediaQuery() {
  MediaQueryContext *_localctx = _tracker.createInstance<MediaQueryContext>(_ctx, getState());
  enterRule(_localctx, 14, css3Parser::RuleMediaQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(340);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Comment:
      case css3Parser::Space:
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        enterOuterAlt(_localctx, 1);
        setState(316);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
        case 1: {
          setState(315);
          _la = _input->LA(1);
          if (!(_la == css3Parser::MediaOnly

          || _la == css3Parser::Not)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        setState(318);
        ws();
        setState(319);
        mediaType();
        setState(320);
        ws();
        setState(327);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(321);
            match(css3Parser::And);
            setState(322);
            ws();
            setState(323);
            mediaExpression(); 
          }
          setState(329);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
        }
        break;
      }

      case css3Parser::OpenParen: {
        enterOuterAlt(_localctx, 2);
        setState(330);
        mediaExpression();
        setState(337);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(331);
            match(css3Parser::And);
            setState(332);
            ws();
            setState(333);
            mediaExpression(); 
          }
          setState(339);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaTypeContext ------------------------------------------------------------------

css3Parser::MediaTypeContext::MediaTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::MediaTypeContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::MediaTypeContext::getRuleIndex() const {
  return css3Parser::RuleMediaType;
}

void css3Parser::MediaTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaType(this);
}

void css3Parser::MediaTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaType(this);
}

css3Parser::MediaTypeContext* css3Parser::mediaType() {
  MediaTypeContext *_localctx = _tracker.createInstance<MediaTypeContext>(_ctx, getState());
  enterRule(_localctx, 16, css3Parser::RuleMediaType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(342);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaExpressionContext ------------------------------------------------------------------

css3Parser::MediaExpressionContext::MediaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::MediaExpressionContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::MediaExpressionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaExpressionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaFeatureContext* css3Parser::MediaExpressionContext::mediaFeature() {
  return getRuleContext<css3Parser::MediaFeatureContext>(0);
}

tree::TerminalNode* css3Parser::MediaExpressionContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::MediaExpressionContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::ExprContext* css3Parser::MediaExpressionContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}


size_t css3Parser::MediaExpressionContext::getRuleIndex() const {
  return css3Parser::RuleMediaExpression;
}

void css3Parser::MediaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaExpression(this);
}

void css3Parser::MediaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaExpression(this);
}

css3Parser::MediaExpressionContext* css3Parser::mediaExpression() {
  MediaExpressionContext *_localctx = _tracker.createInstance<MediaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 18, css3Parser::RuleMediaExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    match(css3Parser::OpenParen);
    setState(345);
    ws();
    setState(346);
    mediaFeature();
    setState(351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Colon) {
      setState(347);
      match(css3Parser::Colon);
      setState(348);
      ws();
      setState(349);
      expr();
    }
    setState(353);
    match(css3Parser::CloseParen);
    setState(354);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaFeatureContext ------------------------------------------------------------------

css3Parser::MediaFeatureContext::MediaFeatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::MediaFeatureContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::WsContext* css3Parser::MediaFeatureContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::MediaFeatureContext::getRuleIndex() const {
  return css3Parser::RuleMediaFeature;
}

void css3Parser::MediaFeatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaFeature(this);
}

void css3Parser::MediaFeatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaFeature(this);
}

css3Parser::MediaFeatureContext* css3Parser::mediaFeature() {
  MediaFeatureContext *_localctx = _tracker.createInstance<MediaFeatureContext>(_ctx, getState());
  enterRule(_localctx, 20, css3Parser::RuleMediaFeature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(356);
    ident();
    setState(357);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PageContext ------------------------------------------------------------------

css3Parser::PageContext::PageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PageContext::Page() {
  return getToken(css3Parser::Page, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::PageContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::PageContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::PageContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::PageContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::PseudoPageContext* css3Parser::PageContext::pseudoPage() {
  return getRuleContext<css3Parser::PseudoPageContext>(0);
}

std::vector<css3Parser::DeclarationContext *> css3Parser::PageContext::declaration() {
  return getRuleContexts<css3Parser::DeclarationContext>();
}

css3Parser::DeclarationContext* css3Parser::PageContext::declaration(size_t i) {
  return getRuleContext<css3Parser::DeclarationContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::PageContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::PageContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::PageContext::getRuleIndex() const {
  return css3Parser::RulePage;
}

void css3Parser::PageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPage(this);
}

void css3Parser::PageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPage(this);
}

css3Parser::PageContext* css3Parser::page() {
  PageContext *_localctx = _tracker.createInstance<PageContext>(_ctx, getState());
  enterRule(_localctx, 22, css3Parser::RulePage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(359);
    match(css3Parser::Page);
    setState(360);
    ws();
    setState(362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Colon) {
      setState(361);
      pseudoPage();
    }
    setState(364);
    match(css3Parser::OpenBrace);
    setState(365);
    ws();
    setState(367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5779244251887978496) != 0)) {
      setState(366);
      declaration();
    }
    setState(376);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::SemiColon) {
      setState(369);
      match(css3Parser::SemiColon);
      setState(370);
      ws();
      setState(372);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5779244251887978496) != 0)) {
        setState(371);
        declaration();
      }
      setState(378);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(379);
    match(css3Parser::CloseBrace);
    setState(380);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudoPageContext ------------------------------------------------------------------

css3Parser::PseudoPageContext::PseudoPageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PseudoPageContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::IdentContext* css3Parser::PseudoPageContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::WsContext* css3Parser::PseudoPageContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::PseudoPageContext::getRuleIndex() const {
  return css3Parser::RulePseudoPage;
}

void css3Parser::PseudoPageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPseudoPage(this);
}

void css3Parser::PseudoPageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPseudoPage(this);
}

css3Parser::PseudoPageContext* css3Parser::pseudoPage() {
  PseudoPageContext *_localctx = _tracker.createInstance<PseudoPageContext>(_ctx, getState());
  enterRule(_localctx, 24, css3Parser::RulePseudoPage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(382);
    match(css3Parser::Colon);
    setState(383);
    ident();
    setState(384);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorGroupContext ------------------------------------------------------------------

css3Parser::SelectorGroupContext::SelectorGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SelectorContext *> css3Parser::SelectorGroupContext::selector() {
  return getRuleContexts<css3Parser::SelectorContext>();
}

css3Parser::SelectorContext* css3Parser::SelectorGroupContext::selector(size_t i) {
  return getRuleContext<css3Parser::SelectorContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::SelectorGroupContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::SelectorGroupContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}

std::vector<css3Parser::WsContext *> css3Parser::SelectorGroupContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SelectorGroupContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}


size_t css3Parser::SelectorGroupContext::getRuleIndex() const {
  return css3Parser::RuleSelectorGroup;
}

void css3Parser::SelectorGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorGroup(this);
}

void css3Parser::SelectorGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorGroup(this);
}

css3Parser::SelectorGroupContext* css3Parser::selectorGroup() {
  SelectorGroupContext *_localctx = _tracker.createInstance<SelectorGroupContext>(_ctx, getState());
  enterRule(_localctx, 26, css3Parser::RuleSelectorGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    selector();
    setState(393);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Comma) {
      setState(387);
      match(css3Parser::Comma);
      setState(388);
      ws();
      setState(389);
      selector();
      setState(395);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorContext ------------------------------------------------------------------

css3Parser::SelectorContext::SelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SimpleSelectorSequenceContext *> css3Parser::SelectorContext::simpleSelectorSequence() {
  return getRuleContexts<css3Parser::SimpleSelectorSequenceContext>();
}

css3Parser::SimpleSelectorSequenceContext* css3Parser::SelectorContext::simpleSelectorSequence(size_t i) {
  return getRuleContext<css3Parser::SimpleSelectorSequenceContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::SelectorContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SelectorContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::CombinatorContext *> css3Parser::SelectorContext::combinator() {
  return getRuleContexts<css3Parser::CombinatorContext>();
}

css3Parser::CombinatorContext* css3Parser::SelectorContext::combinator(size_t i) {
  return getRuleContext<css3Parser::CombinatorContext>(i);
}


size_t css3Parser::SelectorContext::getRuleIndex() const {
  return css3Parser::RuleSelector;
}

void css3Parser::SelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelector(this);
}

void css3Parser::SelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelector(this);
}

css3Parser::SelectorContext* css3Parser::selector() {
  SelectorContext *_localctx = _tracker.createInstance<SelectorContext>(_ctx, getState());
  enterRule(_localctx, 28, css3Parser::RuleSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(396);
    simpleSelectorSequence();
    setState(397);
    ws();
    setState(404);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2886218153984) != 0)) {
      setState(398);
      combinator();
      setState(399);
      simpleSelectorSequence();
      setState(400);
      ws();
      setState(406);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CombinatorContext ------------------------------------------------------------------

css3Parser::CombinatorContext::CombinatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CombinatorContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

css3Parser::WsContext* css3Parser::CombinatorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::CombinatorContext::Greater() {
  return getToken(css3Parser::Greater, 0);
}

tree::TerminalNode* css3Parser::CombinatorContext::Tilde() {
  return getToken(css3Parser::Tilde, 0);
}

tree::TerminalNode* css3Parser::CombinatorContext::Space() {
  return getToken(css3Parser::Space, 0);
}


size_t css3Parser::CombinatorContext::getRuleIndex() const {
  return css3Parser::RuleCombinator;
}

void css3Parser::CombinatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCombinator(this);
}

void css3Parser::CombinatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCombinator(this);
}

css3Parser::CombinatorContext* css3Parser::combinator() {
  CombinatorContext *_localctx = _tracker.createInstance<CombinatorContext>(_ctx, getState());
  enterRule(_localctx, 30, css3Parser::RuleCombinator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(415);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Plus: {
        enterOuterAlt(_localctx, 1);
        setState(407);
        match(css3Parser::Plus);
        setState(408);
        ws();
        break;
      }

      case css3Parser::Greater: {
        enterOuterAlt(_localctx, 2);
        setState(409);
        match(css3Parser::Greater);
        setState(410);
        ws();
        break;
      }

      case css3Parser::Tilde: {
        enterOuterAlt(_localctx, 3);
        setState(411);
        match(css3Parser::Tilde);
        setState(412);
        ws();
        break;
      }

      case css3Parser::Space: {
        enterOuterAlt(_localctx, 4);
        setState(413);
        match(css3Parser::Space);
        setState(414);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleSelectorSequenceContext ------------------------------------------------------------------

css3Parser::SimpleSelectorSequenceContext::SimpleSelectorSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::TypeSelectorContext* css3Parser::SimpleSelectorSequenceContext::typeSelector() {
  return getRuleContext<css3Parser::TypeSelectorContext>(0);
}

css3Parser::UniversalContext* css3Parser::SimpleSelectorSequenceContext::universal() {
  return getRuleContext<css3Parser::UniversalContext>(0);
}

std::vector<tree::TerminalNode *> css3Parser::SimpleSelectorSequenceContext::Hash() {
  return getTokens(css3Parser::Hash);
}

tree::TerminalNode* css3Parser::SimpleSelectorSequenceContext::Hash(size_t i) {
  return getToken(css3Parser::Hash, i);
}

std::vector<css3Parser::ClassNameContext *> css3Parser::SimpleSelectorSequenceContext::className() {
  return getRuleContexts<css3Parser::ClassNameContext>();
}

css3Parser::ClassNameContext* css3Parser::SimpleSelectorSequenceContext::className(size_t i) {
  return getRuleContext<css3Parser::ClassNameContext>(i);
}

std::vector<css3Parser::AttribContext *> css3Parser::SimpleSelectorSequenceContext::attrib() {
  return getRuleContexts<css3Parser::AttribContext>();
}

css3Parser::AttribContext* css3Parser::SimpleSelectorSequenceContext::attrib(size_t i) {
  return getRuleContext<css3Parser::AttribContext>(i);
}

std::vector<css3Parser::PseudoContext *> css3Parser::SimpleSelectorSequenceContext::pseudo() {
  return getRuleContexts<css3Parser::PseudoContext>();
}

css3Parser::PseudoContext* css3Parser::SimpleSelectorSequenceContext::pseudo(size_t i) {
  return getRuleContext<css3Parser::PseudoContext>(i);
}

std::vector<css3Parser::NegationContext *> css3Parser::SimpleSelectorSequenceContext::negation() {
  return getRuleContexts<css3Parser::NegationContext>();
}

css3Parser::NegationContext* css3Parser::SimpleSelectorSequenceContext::negation(size_t i) {
  return getRuleContext<css3Parser::NegationContext>(i);
}


size_t css3Parser::SimpleSelectorSequenceContext::getRuleIndex() const {
  return css3Parser::RuleSimpleSelectorSequence;
}

void css3Parser::SimpleSelectorSequenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleSelectorSequence(this);
}

void css3Parser::SimpleSelectorSequenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleSelectorSequence(this);
}

css3Parser::SimpleSelectorSequenceContext* css3Parser::simpleSelectorSequence() {
  SimpleSelectorSequenceContext *_localctx = _tracker.createInstance<SimpleSelectorSequenceContext>(_ctx, getState());
  enterRule(_localctx, 32, css3Parser::RuleSimpleSelectorSequence);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(440);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Multiply:
      case css3Parser::Pipe:
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        enterOuterAlt(_localctx, 1);
        setState(419);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
          setState(417);
          typeSelector();
          break;
        }

        case 2: {
          setState(418);
          universal();
          break;
        }

        default:
          break;
        }
        setState(428);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4398050706946) != 0)) {
          setState(426);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case css3Parser::Hash: {
              setState(421);
              match(css3Parser::Hash);
              break;
            }

            case css3Parser::Dot: {
              setState(422);
              className();
              break;
            }

            case css3Parser::OpenBracket: {
              setState(423);
              attrib();
              break;
            }

            case css3Parser::Colon: {
              setState(424);
              pseudo();
              break;
            }

            case css3Parser::PseudoNot: {
              setState(425);
              negation();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(430);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case css3Parser::OpenBracket:
      case css3Parser::Colon:
      case css3Parser::Dot:
      case css3Parser::Hash:
      case css3Parser::PseudoNot: {
        enterOuterAlt(_localctx, 2);
        setState(436); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(436);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case css3Parser::Hash: {
              setState(431);
              match(css3Parser::Hash);
              break;
            }

            case css3Parser::Dot: {
              setState(432);
              className();
              break;
            }

            case css3Parser::OpenBracket: {
              setState(433);
              attrib();
              break;
            }

            case css3Parser::Colon: {
              setState(434);
              pseudo();
              break;
            }

            case css3Parser::PseudoNot: {
              setState(435);
              negation();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(438); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4398050706946) != 0));
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSelectorContext ------------------------------------------------------------------

css3Parser::TypeSelectorContext::TypeSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::ElementNameContext* css3Parser::TypeSelectorContext::elementName() {
  return getRuleContext<css3Parser::ElementNameContext>(0);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::TypeSelectorContext::typeNamespacePrefix() {
  return getRuleContext<css3Parser::TypeNamespacePrefixContext>(0);
}


size_t css3Parser::TypeSelectorContext::getRuleIndex() const {
  return css3Parser::RuleTypeSelector;
}

void css3Parser::TypeSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSelector(this);
}

void css3Parser::TypeSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSelector(this);
}

css3Parser::TypeSelectorContext* css3Parser::typeSelector() {
  TypeSelectorContext *_localctx = _tracker.createInstance<TypeSelectorContext>(_ctx, getState());
  enterRule(_localctx, 34, css3Parser::RuleTypeSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(443);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(442);
      typeNamespacePrefix();
      break;
    }

    default:
      break;
    }
    setState(445);
    elementName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNamespacePrefixContext ------------------------------------------------------------------

css3Parser::TypeNamespacePrefixContext::TypeNamespacePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::TypeNamespacePrefixContext::Pipe() {
  return getToken(css3Parser::Pipe, 0);
}

css3Parser::IdentContext* css3Parser::TypeNamespacePrefixContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::TypeNamespacePrefixContext::Multiply() {
  return getToken(css3Parser::Multiply, 0);
}


size_t css3Parser::TypeNamespacePrefixContext::getRuleIndex() const {
  return css3Parser::RuleTypeNamespacePrefix;
}

void css3Parser::TypeNamespacePrefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNamespacePrefix(this);
}

void css3Parser::TypeNamespacePrefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNamespacePrefix(this);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::typeNamespacePrefix() {
  TypeNamespacePrefixContext *_localctx = _tracker.createInstance<TypeNamespacePrefixContext>(_ctx, getState());
  enterRule(_localctx, 36, css3Parser::RuleTypeNamespacePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        setState(447);
        ident();
        break;
      }

      case css3Parser::Multiply: {
        setState(448);
        match(css3Parser::Multiply);
        break;
      }

      case css3Parser::Pipe: {
        break;
      }

    default:
      break;
    }
    setState(451);
    match(css3Parser::Pipe);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementNameContext ------------------------------------------------------------------

css3Parser::ElementNameContext::ElementNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::ElementNameContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::ElementNameContext::getRuleIndex() const {
  return css3Parser::RuleElementName;
}

void css3Parser::ElementNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementName(this);
}

void css3Parser::ElementNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementName(this);
}

css3Parser::ElementNameContext* css3Parser::elementName() {
  ElementNameContext *_localctx = _tracker.createInstance<ElementNameContext>(_ctx, getState());
  enterRule(_localctx, 38, css3Parser::RuleElementName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(453);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UniversalContext ------------------------------------------------------------------

css3Parser::UniversalContext::UniversalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::UniversalContext::Multiply() {
  return getToken(css3Parser::Multiply, 0);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::UniversalContext::typeNamespacePrefix() {
  return getRuleContext<css3Parser::TypeNamespacePrefixContext>(0);
}


size_t css3Parser::UniversalContext::getRuleIndex() const {
  return css3Parser::RuleUniversal;
}

void css3Parser::UniversalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUniversal(this);
}

void css3Parser::UniversalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUniversal(this);
}

css3Parser::UniversalContext* css3Parser::universal() {
  UniversalContext *_localctx = _tracker.createInstance<UniversalContext>(_ctx, getState());
  enterRule(_localctx, 40, css3Parser::RuleUniversal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(455);
      typeNamespacePrefix();
      break;
    }

    default:
      break;
    }
    setState(458);
    match(css3Parser::Multiply);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassNameContext ------------------------------------------------------------------

css3Parser::ClassNameContext::ClassNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::ClassNameContext::Dot() {
  return getToken(css3Parser::Dot, 0);
}

css3Parser::IdentContext* css3Parser::ClassNameContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::ClassNameContext::getRuleIndex() const {
  return css3Parser::RuleClassName;
}

void css3Parser::ClassNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassName(this);
}

void css3Parser::ClassNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassName(this);
}

css3Parser::ClassNameContext* css3Parser::className() {
  ClassNameContext *_localctx = _tracker.createInstance<ClassNameContext>(_ctx, getState());
  enterRule(_localctx, 42, css3Parser::RuleClassName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(460);
    match(css3Parser::Dot);
    setState(461);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttribContext ------------------------------------------------------------------

css3Parser::AttribContext::AttribContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::AttribContext::OpenBracket() {
  return getToken(css3Parser::OpenBracket, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::AttribContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::AttribContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::IdentContext *> css3Parser::AttribContext::ident() {
  return getRuleContexts<css3Parser::IdentContext>();
}

css3Parser::IdentContext* css3Parser::AttribContext::ident(size_t i) {
  return getRuleContext<css3Parser::IdentContext>(i);
}

tree::TerminalNode* css3Parser::AttribContext::CloseBracket() {
  return getToken(css3Parser::CloseBracket, 0);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::AttribContext::typeNamespacePrefix() {
  return getRuleContext<css3Parser::TypeNamespacePrefixContext>(0);
}

tree::TerminalNode* css3Parser::AttribContext::PrefixMatch() {
  return getToken(css3Parser::PrefixMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::SuffixMatch() {
  return getToken(css3Parser::SuffixMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::SubstringMatch() {
  return getToken(css3Parser::SubstringMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::Equal() {
  return getToken(css3Parser::Equal, 0);
}

tree::TerminalNode* css3Parser::AttribContext::Includes() {
  return getToken(css3Parser::Includes, 0);
}

tree::TerminalNode* css3Parser::AttribContext::DashMatch() {
  return getToken(css3Parser::DashMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::String_() {
  return getToken(css3Parser::String_, 0);
}


size_t css3Parser::AttribContext::getRuleIndex() const {
  return css3Parser::RuleAttrib;
}

void css3Parser::AttribContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttrib(this);
}

void css3Parser::AttribContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttrib(this);
}

css3Parser::AttribContext* css3Parser::attrib() {
  AttribContext *_localctx = _tracker.createInstance<AttribContext>(_ctx, getState());
  enterRule(_localctx, 44, css3Parser::RuleAttrib);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(463);
    match(css3Parser::OpenBracket);
    setState(464);
    ws();
    setState(466);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(465);
      typeNamespacePrefix();
      break;
    }

    default:
      break;
    }
    setState(468);
    ident();
    setState(469);
    ws();
    setState(478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 246290607767808) != 0)) {
      setState(470);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 246290607767808) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(471);
      ws();
      setState(474);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::MediaOnly:
        case css3Parser::Not:
        case css3Parser::And:
        case css3Parser::Or:
        case css3Parser::From:
        case css3Parser::To:
        case css3Parser::Ident: {
          setState(472);
          ident();
          break;
        }

        case css3Parser::String_: {
          setState(473);
          match(css3Parser::String_);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(476);
      ws();
    }
    setState(480);
    match(css3Parser::CloseBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudoContext ------------------------------------------------------------------

css3Parser::PseudoContext::PseudoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> css3Parser::PseudoContext::Colon() {
  return getTokens(css3Parser::Colon);
}

tree::TerminalNode* css3Parser::PseudoContext::Colon(size_t i) {
  return getToken(css3Parser::Colon, i);
}

css3Parser::IdentContext* css3Parser::PseudoContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::FunctionalPseudoContext* css3Parser::PseudoContext::functionalPseudo() {
  return getRuleContext<css3Parser::FunctionalPseudoContext>(0);
}


size_t css3Parser::PseudoContext::getRuleIndex() const {
  return css3Parser::RulePseudo;
}

void css3Parser::PseudoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPseudo(this);
}

void css3Parser::PseudoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPseudo(this);
}

css3Parser::PseudoContext* css3Parser::pseudo() {
  PseudoContext *_localctx = _tracker.createInstance<PseudoContext>(_ctx, getState());
  enterRule(_localctx, 46, css3Parser::RulePseudo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    match(css3Parser::Colon);
    setState(484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Colon) {
      setState(483);
      match(css3Parser::Colon);
    }
    setState(488);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        setState(486);
        ident();
        break;
      }

      case css3Parser::Function_: {
        setState(487);
        functionalPseudo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionalPseudoContext ------------------------------------------------------------------

css3Parser::FunctionalPseudoContext::FunctionalPseudoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FunctionalPseudoContext::Function_() {
  return getToken(css3Parser::Function_, 0);
}

css3Parser::WsContext* css3Parser::FunctionalPseudoContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ExpressionContext* css3Parser::FunctionalPseudoContext::expression() {
  return getRuleContext<css3Parser::ExpressionContext>(0);
}

tree::TerminalNode* css3Parser::FunctionalPseudoContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::FunctionalPseudoContext::getRuleIndex() const {
  return css3Parser::RuleFunctionalPseudo;
}

void css3Parser::FunctionalPseudoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionalPseudo(this);
}

void css3Parser::FunctionalPseudoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionalPseudo(this);
}

css3Parser::FunctionalPseudoContext* css3Parser::functionalPseudo() {
  FunctionalPseudoContext *_localctx = _tracker.createInstance<FunctionalPseudoContext>(_ctx, getState());
  enterRule(_localctx, 48, css3Parser::RuleFunctionalPseudo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    match(css3Parser::Function_);
    setState(491);
    ws();
    setState(492);
    expression();
    setState(493);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

css3Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::ExpressionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ExpressionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Plus() {
  return getTokens(css3Parser::Plus);
}

tree::TerminalNode* css3Parser::ExpressionContext::Plus(size_t i) {
  return getToken(css3Parser::Plus, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Minus() {
  return getTokens(css3Parser::Minus);
}

tree::TerminalNode* css3Parser::ExpressionContext::Minus(size_t i) {
  return getToken(css3Parser::Minus, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Dimension() {
  return getTokens(css3Parser::Dimension);
}

tree::TerminalNode* css3Parser::ExpressionContext::Dimension(size_t i) {
  return getToken(css3Parser::Dimension, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::UnknownDimension() {
  return getTokens(css3Parser::UnknownDimension);
}

tree::TerminalNode* css3Parser::ExpressionContext::UnknownDimension(size_t i) {
  return getToken(css3Parser::UnknownDimension, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Number() {
  return getTokens(css3Parser::Number);
}

tree::TerminalNode* css3Parser::ExpressionContext::Number(size_t i) {
  return getToken(css3Parser::Number, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::String_() {
  return getTokens(css3Parser::String_);
}

tree::TerminalNode* css3Parser::ExpressionContext::String_(size_t i) {
  return getToken(css3Parser::String_, i);
}

std::vector<css3Parser::IdentContext *> css3Parser::ExpressionContext::ident() {
  return getRuleContexts<css3Parser::IdentContext>();
}

css3Parser::IdentContext* css3Parser::ExpressionContext::ident(size_t i) {
  return getRuleContext<css3Parser::IdentContext>(i);
}


size_t css3Parser::ExpressionContext::getRuleIndex() const {
  return css3Parser::RuleExpression;
}

void css3Parser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void css3Parser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

css3Parser::ExpressionContext* css3Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 50, css3Parser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(505); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(502);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::Plus: {
          setState(495);
          match(css3Parser::Plus);
          break;
        }

        case css3Parser::Minus: {
          setState(496);
          match(css3Parser::Minus);
          break;
        }

        case css3Parser::Dimension: {
          setState(497);
          match(css3Parser::Dimension);
          break;
        }

        case css3Parser::UnknownDimension: {
          setState(498);
          match(css3Parser::UnknownDimension);
          break;
        }

        case css3Parser::Number: {
          setState(499);
          match(css3Parser::Number);
          break;
        }

        case css3Parser::String_: {
          setState(500);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::MediaOnly:
        case css3Parser::Not:
        case css3Parser::And:
        case css3Parser::Or:
        case css3Parser::From:
        case css3Parser::To:
        case css3Parser::Ident: {
          setState(501);
          ident();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(504);
      ws();
      setState(507); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4626349650956255232) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NegationContext ------------------------------------------------------------------

css3Parser::NegationContext::NegationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::NegationContext::PseudoNot() {
  return getToken(css3Parser::PseudoNot, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::NegationContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::NegationContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::NegationArgContext* css3Parser::NegationContext::negationArg() {
  return getRuleContext<css3Parser::NegationArgContext>(0);
}

tree::TerminalNode* css3Parser::NegationContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::NegationContext::getRuleIndex() const {
  return css3Parser::RuleNegation;
}

void css3Parser::NegationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegation(this);
}

void css3Parser::NegationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegation(this);
}

css3Parser::NegationContext* css3Parser::negation() {
  NegationContext *_localctx = _tracker.createInstance<NegationContext>(_ctx, getState());
  enterRule(_localctx, 52, css3Parser::RuleNegation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(509);
    match(css3Parser::PseudoNot);
    setState(510);
    ws();
    setState(511);
    negationArg();
    setState(512);
    ws();
    setState(513);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NegationArgContext ------------------------------------------------------------------

css3Parser::NegationArgContext::NegationArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::TypeSelectorContext* css3Parser::NegationArgContext::typeSelector() {
  return getRuleContext<css3Parser::TypeSelectorContext>(0);
}

css3Parser::UniversalContext* css3Parser::NegationArgContext::universal() {
  return getRuleContext<css3Parser::UniversalContext>(0);
}

tree::TerminalNode* css3Parser::NegationArgContext::Hash() {
  return getToken(css3Parser::Hash, 0);
}

css3Parser::ClassNameContext* css3Parser::NegationArgContext::className() {
  return getRuleContext<css3Parser::ClassNameContext>(0);
}

css3Parser::AttribContext* css3Parser::NegationArgContext::attrib() {
  return getRuleContext<css3Parser::AttribContext>(0);
}

css3Parser::PseudoContext* css3Parser::NegationArgContext::pseudo() {
  return getRuleContext<css3Parser::PseudoContext>(0);
}


size_t css3Parser::NegationArgContext::getRuleIndex() const {
  return css3Parser::RuleNegationArg;
}

void css3Parser::NegationArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegationArg(this);
}

void css3Parser::NegationArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegationArg(this);
}

css3Parser::NegationArgContext* css3Parser::negationArg() {
  NegationArgContext *_localctx = _tracker.createInstance<NegationArgContext>(_ctx, getState());
  enterRule(_localctx, 54, css3Parser::RuleNegationArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(521);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(515);
      typeSelector();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(516);
      universal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(517);
      match(css3Parser::Hash);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(518);
      className();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(519);
      attrib();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(520);
      pseudo();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Operator_Context ------------------------------------------------------------------

css3Parser::Operator_Context::Operator_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::Operator_Context::getRuleIndex() const {
  return css3Parser::RuleOperator_;
}

void css3Parser::Operator_Context::copyFrom(Operator_Context *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadOperatorContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadOperatorContext::Equal() {
  return getToken(css3Parser::Equal, 0);
}

css3Parser::WsContext* css3Parser::BadOperatorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::BadOperatorContext::BadOperatorContext(Operator_Context *ctx) { copyFrom(ctx); }

void css3Parser::BadOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadOperator(this);
}
void css3Parser::BadOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadOperator(this);
}
//----------------- GoodOperatorContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodOperatorContext::Divide() {
  return getToken(css3Parser::Divide, 0);
}

css3Parser::WsContext* css3Parser::GoodOperatorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::GoodOperatorContext::Comma() {
  return getToken(css3Parser::Comma, 0);
}

tree::TerminalNode* css3Parser::GoodOperatorContext::Space() {
  return getToken(css3Parser::Space, 0);
}

css3Parser::GoodOperatorContext::GoodOperatorContext(Operator_Context *ctx) { copyFrom(ctx); }

void css3Parser::GoodOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodOperator(this);
}
void css3Parser::GoodOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodOperator(this);
}
css3Parser::Operator_Context* css3Parser::operator_() {
  Operator_Context *_localctx = _tracker.createInstance<Operator_Context>(_ctx, getState());
  enterRule(_localctx, 56, css3Parser::RuleOperator_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(531);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Divide: {
        _localctx = _tracker.createInstance<css3Parser::GoodOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(523);
        match(css3Parser::Divide);
        setState(524);
        ws();
        break;
      }

      case css3Parser::Comma: {
        _localctx = _tracker.createInstance<css3Parser::GoodOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(525);
        match(css3Parser::Comma);
        setState(526);
        ws();
        break;
      }

      case css3Parser::Space: {
        _localctx = _tracker.createInstance<css3Parser::GoodOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(527);
        match(css3Parser::Space);
        setState(528);
        ws();
        break;
      }

      case css3Parser::Equal: {
        _localctx = _tracker.createInstance<css3Parser::BadOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(529);
        match(css3Parser::Equal);
        setState(530);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_Context ------------------------------------------------------------------

css3Parser::Property_Context::Property_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::Property_Context::getRuleIndex() const {
  return css3Parser::RuleProperty_;
}

void css3Parser::Property_Context::copyFrom(Property_Context *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadPropertyContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadPropertyContext::Multiply() {
  return getToken(css3Parser::Multiply, 0);
}

css3Parser::IdentContext* css3Parser::BadPropertyContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::BadPropertyContext::Underscore() {
  return getToken(css3Parser::Underscore, 0);
}

css3Parser::BadPropertyContext::BadPropertyContext(Property_Context *ctx) { copyFrom(ctx); }

void css3Parser::BadPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadProperty(this);
}
void css3Parser::BadPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadProperty(this);
}
//----------------- GoodPropertyContext ------------------------------------------------------------------

css3Parser::IdentContext* css3Parser::GoodPropertyContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::WsContext* css3Parser::GoodPropertyContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::GoodPropertyContext::Variable() {
  return getToken(css3Parser::Variable, 0);
}

css3Parser::GoodPropertyContext::GoodPropertyContext(Property_Context *ctx) { copyFrom(ctx); }

void css3Parser::GoodPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodProperty(this);
}
void css3Parser::GoodPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodProperty(this);
}
css3Parser::Property_Context* css3Parser::property_() {
  Property_Context *_localctx = _tracker.createInstance<Property_Context>(_ctx, getState());
  enterRule(_localctx, 58, css3Parser::RuleProperty_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(542);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        _localctx = _tracker.createInstance<css3Parser::GoodPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(533);
        ident();
        setState(534);
        ws();
        break;
      }

      case css3Parser::Variable: {
        _localctx = _tracker.createInstance<css3Parser::GoodPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(536);
        match(css3Parser::Variable);
        setState(537);
        ws();
        break;
      }

      case css3Parser::Multiply: {
        _localctx = _tracker.createInstance<css3Parser::BadPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(538);
        match(css3Parser::Multiply);
        setState(539);
        ident();
        break;
      }

      case css3Parser::Underscore: {
        _localctx = _tracker.createInstance<css3Parser::BadPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(540);
        match(css3Parser::Underscore);
        setState(541);
        ident();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RulesetContext ------------------------------------------------------------------

css3Parser::RulesetContext::RulesetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::RulesetContext::getRuleIndex() const {
  return css3Parser::RuleRuleset;
}

void css3Parser::RulesetContext::copyFrom(RulesetContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnknownRulesetContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::UnknownRulesetContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::UnknownRulesetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::UnknownRulesetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::UnknownRulesetContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::UnknownRulesetContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::UnknownRulesetContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

css3Parser::DeclarationListContext* css3Parser::UnknownRulesetContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}

css3Parser::UnknownRulesetContext::UnknownRulesetContext(RulesetContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownRulesetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownRuleset(this);
}
void css3Parser::UnknownRulesetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownRuleset(this);
}
//----------------- KnownRulesetContext ------------------------------------------------------------------

css3Parser::SelectorGroupContext* css3Parser::KnownRulesetContext::selectorGroup() {
  return getRuleContext<css3Parser::SelectorGroupContext>(0);
}

tree::TerminalNode* css3Parser::KnownRulesetContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::KnownRulesetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KnownRulesetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::KnownRulesetContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::KnownRulesetContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}

css3Parser::KnownRulesetContext::KnownRulesetContext(RulesetContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownRulesetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownRuleset(this);
}
void css3Parser::KnownRulesetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownRuleset(this);
}
css3Parser::RulesetContext* css3Parser::ruleset() {
  RulesetContext *_localctx = _tracker.createInstance<RulesetContext>(_ctx, getState());
  enterRule(_localctx, 60, css3Parser::RuleRuleset);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(567);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownRulesetContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(544);
      selectorGroup();
      setState(545);
      match(css3Parser::OpenBrace);
      setState(546);
      ws();
      setState(548);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5779244251887978624) != 0)) {
        setState(547);
        declarationList();
      }
      setState(550);
      match(css3Parser::CloseBrace);
      setState(551);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::UnknownRulesetContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(556);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4597022382133018102) != 0)) {
        setState(553);
        any_();
        setState(558);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(559);
      match(css3Parser::OpenBrace);
      setState(560);
      ws();
      setState(562);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5779244251887978624) != 0)) {
        setState(561);
        declarationList();
      }
      setState(564);
      match(css3Parser::CloseBrace);
      setState(565);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationListContext ------------------------------------------------------------------

css3Parser::DeclarationListContext::DeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::DeclarationContext *> css3Parser::DeclarationListContext::declaration() {
  return getRuleContexts<css3Parser::DeclarationContext>();
}

css3Parser::DeclarationContext* css3Parser::DeclarationListContext::declaration(size_t i) {
  return getRuleContext<css3Parser::DeclarationContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::DeclarationListContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::DeclarationListContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::DeclarationListContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::DeclarationListContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::DeclarationListContext::getRuleIndex() const {
  return css3Parser::RuleDeclarationList;
}

void css3Parser::DeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationList(this);
}

void css3Parser::DeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationList(this);
}

css3Parser::DeclarationListContext* css3Parser::declarationList() {
  DeclarationListContext *_localctx = _tracker.createInstance<DeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 62, css3Parser::RuleDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(573);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::SemiColon) {
      setState(569);
      match(css3Parser::SemiColon);
      setState(570);
      ws();
      setState(575);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(576);
    declaration();
    setState(577);
    ws();
    setState(585);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(578);
        match(css3Parser::SemiColon);
        setState(579);
        ws();
        setState(581);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
        case 1: {
          setState(580);
          declaration();
          break;
        }

        default:
          break;
        } 
      }
      setState(587);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

css3Parser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::DeclarationContext::getRuleIndex() const {
  return css3Parser::RuleDeclaration;
}

void css3Parser::DeclarationContext::copyFrom(DeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnknownDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::UnknownDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::UnknownDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::UnknownDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ValueContext* css3Parser::UnknownDeclarationContext::value() {
  return getRuleContext<css3Parser::ValueContext>(0);
}

css3Parser::UnknownDeclarationContext::UnknownDeclarationContext(DeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownDeclaration(this);
}
void css3Parser::UnknownDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownDeclaration(this);
}
//----------------- KnownDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::KnownDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::KnownDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::KnownDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ExprContext* css3Parser::KnownDeclarationContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

css3Parser::PrioContext* css3Parser::KnownDeclarationContext::prio() {
  return getRuleContext<css3Parser::PrioContext>(0);
}

css3Parser::KnownDeclarationContext::KnownDeclarationContext(DeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownDeclaration(this);
}
void css3Parser::KnownDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownDeclaration(this);
}
css3Parser::DeclarationContext* css3Parser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 64, css3Parser::RuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(600);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(588);
      property_();
      setState(589);
      match(css3Parser::Colon);
      setState(590);
      ws();
      setState(591);
      expr();
      setState(593);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == css3Parser::Important) {
        setState(592);
        prio();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::UnknownDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(595);
      property_();
      setState(596);
      match(css3Parser::Colon);
      setState(597);
      ws();
      setState(598);
      value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrioContext ------------------------------------------------------------------

css3Parser::PrioContext::PrioContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PrioContext::Important() {
  return getToken(css3Parser::Important, 0);
}

css3Parser::WsContext* css3Parser::PrioContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::PrioContext::getRuleIndex() const {
  return css3Parser::RulePrio;
}

void css3Parser::PrioContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrio(this);
}

void css3Parser::PrioContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrio(this);
}

css3Parser::PrioContext* css3Parser::prio() {
  PrioContext *_localctx = _tracker.createInstance<PrioContext>(_ctx, getState());
  enterRule(_localctx, 66, css3Parser::RulePrio);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    match(css3Parser::Important);
    setState(603);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

css3Parser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::Any_Context *> css3Parser::ValueContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::ValueContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::BlockContext *> css3Parser::ValueContext::block() {
  return getRuleContexts<css3Parser::BlockContext>();
}

css3Parser::BlockContext* css3Parser::ValueContext::block(size_t i) {
  return getRuleContext<css3Parser::BlockContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::ValueContext::AtKeyword() {
  return getTokens(css3Parser::AtKeyword);
}

tree::TerminalNode* css3Parser::ValueContext::AtKeyword(size_t i) {
  return getToken(css3Parser::AtKeyword, i);
}

std::vector<css3Parser::WsContext *> css3Parser::ValueContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ValueContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}


size_t css3Parser::ValueContext::getRuleIndex() const {
  return css3Parser::RuleValue;
}

void css3Parser::ValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue(this);
}

void css3Parser::ValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue(this);
}

css3Parser::ValueContext* css3Parser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 68, css3Parser::RuleValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(609); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(609);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case css3Parser::OpenBracket:
                case css3Parser::OpenParen:
                case css3Parser::Colon:
                case css3Parser::Url:
                case css3Parser::Includes:
                case css3Parser::DashMatch:
                case css3Parser::Hash:
                case css3Parser::Percentage:
                case css3Parser::Url_:
                case css3Parser::UnicodeRange:
                case css3Parser::MediaOnly:
                case css3Parser::Not:
                case css3Parser::And:
                case css3Parser::Dimension:
                case css3Parser::UnknownDimension:
                case css3Parser::Plus:
                case css3Parser::Minus:
                case css3Parser::Number:
                case css3Parser::String_:
                case css3Parser::Or:
                case css3Parser::From:
                case css3Parser::To:
                case css3Parser::Ident:
                case css3Parser::Function_: {
                  setState(605);
                  any_();
                  break;
                }

                case css3Parser::OpenBrace: {
                  setState(606);
                  block();
                  break;
                }

                case css3Parser::AtKeyword: {
                  setState(607);
                  match(css3Parser::AtKeyword);
                  setState(608);
                  ws();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(611); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

css3Parser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::TermContext *> css3Parser::ExprContext::term() {
  return getRuleContexts<css3Parser::TermContext>();
}

css3Parser::TermContext* css3Parser::ExprContext::term(size_t i) {
  return getRuleContext<css3Parser::TermContext>(i);
}

std::vector<css3Parser::Operator_Context *> css3Parser::ExprContext::operator_() {
  return getRuleContexts<css3Parser::Operator_Context>();
}

css3Parser::Operator_Context* css3Parser::ExprContext::operator_(size_t i) {
  return getRuleContext<css3Parser::Operator_Context>(i);
}


size_t css3Parser::ExprContext::getRuleIndex() const {
  return css3Parser::RuleExpr;
}

void css3Parser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void css3Parser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}

css3Parser::ExprContext* css3Parser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 70, css3Parser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(613);
    term();
    setState(620);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(615);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1099511763200) != 0)) {
          setState(614);
          operator_();
        }
        setState(617);
        term(); 
      }
      setState(622);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

css3Parser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::TermContext::getRuleIndex() const {
  return css3Parser::RuleTerm;
}

void css3Parser::TermContext::copyFrom(TermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadTermContext ------------------------------------------------------------------

css3Parser::DxImageTransformContext* css3Parser::BadTermContext::dxImageTransform() {
  return getRuleContext<css3Parser::DxImageTransformContext>(0);
}

css3Parser::BadTermContext::BadTermContext(TermContext *ctx) { copyFrom(ctx); }

void css3Parser::BadTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadTerm(this);
}
void css3Parser::BadTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadTerm(this);
}
//----------------- KnownTermContext ------------------------------------------------------------------

css3Parser::NumberContext* css3Parser::KnownTermContext::number() {
  return getRuleContext<css3Parser::NumberContext>(0);
}

css3Parser::WsContext* css3Parser::KnownTermContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::PercentageContext* css3Parser::KnownTermContext::percentage() {
  return getRuleContext<css3Parser::PercentageContext>(0);
}

css3Parser::DimensionContext* css3Parser::KnownTermContext::dimension() {
  return getRuleContext<css3Parser::DimensionContext>(0);
}

tree::TerminalNode* css3Parser::KnownTermContext::String_() {
  return getToken(css3Parser::String_, 0);
}

tree::TerminalNode* css3Parser::KnownTermContext::UnicodeRange() {
  return getToken(css3Parser::UnicodeRange, 0);
}

css3Parser::IdentContext* css3Parser::KnownTermContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::Var_Context* css3Parser::KnownTermContext::var_() {
  return getRuleContext<css3Parser::Var_Context>(0);
}

css3Parser::UrlContext* css3Parser::KnownTermContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::HexcolorContext* css3Parser::KnownTermContext::hexcolor() {
  return getRuleContext<css3Parser::HexcolorContext>(0);
}

css3Parser::CalcContext* css3Parser::KnownTermContext::calc() {
  return getRuleContext<css3Parser::CalcContext>(0);
}

css3Parser::Function_Context* css3Parser::KnownTermContext::function_() {
  return getRuleContext<css3Parser::Function_Context>(0);
}

css3Parser::KnownTermContext::KnownTermContext(TermContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownTerm(this);
}
void css3Parser::KnownTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownTerm(this);
}
//----------------- UnknownTermContext ------------------------------------------------------------------

css3Parser::UnknownDimensionContext* css3Parser::UnknownTermContext::unknownDimension() {
  return getRuleContext<css3Parser::UnknownDimensionContext>(0);
}

css3Parser::WsContext* css3Parser::UnknownTermContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::UnknownTermContext::UnknownTermContext(TermContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownTerm(this);
}
void css3Parser::UnknownTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownTerm(this);
}
css3Parser::TermContext* css3Parser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 72, css3Parser::RuleTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(650);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(623);
      number();
      setState(624);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(626);
      percentage();
      setState(627);
      ws();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(629);
      dimension();
      setState(630);
      ws();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(632);
      match(css3Parser::String_);
      setState(633);
      ws();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(634);
      match(css3Parser::UnicodeRange);
      setState(635);
      ws();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(636);
      ident();
      setState(637);
      ws();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(639);
      var_();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(640);
      url();
      setState(641);
      ws();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(643);
      hexcolor();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(644);
      calc();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(645);
      function_();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<css3Parser::UnknownTermContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(646);
      unknownDimension();
      setState(647);
      ws();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<css3Parser::BadTermContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(649);
      dxImageTransform();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_Context ------------------------------------------------------------------

css3Parser::Function_Context::Function_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::Function_Context::Function_() {
  return getToken(css3Parser::Function_, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::Function_Context::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::Function_Context::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::ExprContext* css3Parser::Function_Context::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

tree::TerminalNode* css3Parser::Function_Context::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::Function_Context::getRuleIndex() const {
  return css3Parser::RuleFunction_;
}

void css3Parser::Function_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_(this);
}

void css3Parser::Function_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_(this);
}

css3Parser::Function_Context* css3Parser::function_() {
  Function_Context *_localctx = _tracker.createInstance<Function_Context>(_ctx, getState());
  enterRule(_localctx, 74, css3Parser::RuleFunction_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(652);
    match(css3Parser::Function_);
    setState(653);
    ws();
    setState(654);
    expr();
    setState(655);
    match(css3Parser::CloseParen);
    setState(656);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DxImageTransformContext ------------------------------------------------------------------

css3Parser::DxImageTransformContext::DxImageTransformContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::DxImageTransformContext::DxImageTransform() {
  return getToken(css3Parser::DxImageTransform, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::DxImageTransformContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::DxImageTransformContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::ExprContext* css3Parser::DxImageTransformContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

tree::TerminalNode* css3Parser::DxImageTransformContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::DxImageTransformContext::getRuleIndex() const {
  return css3Parser::RuleDxImageTransform;
}

void css3Parser::DxImageTransformContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDxImageTransform(this);
}

void css3Parser::DxImageTransformContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDxImageTransform(this);
}

css3Parser::DxImageTransformContext* css3Parser::dxImageTransform() {
  DxImageTransformContext *_localctx = _tracker.createInstance<DxImageTransformContext>(_ctx, getState());
  enterRule(_localctx, 76, css3Parser::RuleDxImageTransform);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    match(css3Parser::DxImageTransform);
    setState(659);
    ws();
    setState(660);
    expr();
    setState(661);
    match(css3Parser::CloseParen);
    setState(662);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HexcolorContext ------------------------------------------------------------------

css3Parser::HexcolorContext::HexcolorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::HexcolorContext::Hash() {
  return getToken(css3Parser::Hash, 0);
}

css3Parser::WsContext* css3Parser::HexcolorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::HexcolorContext::getRuleIndex() const {
  return css3Parser::RuleHexcolor;
}

void css3Parser::HexcolorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHexcolor(this);
}

void css3Parser::HexcolorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHexcolor(this);
}

css3Parser::HexcolorContext* css3Parser::hexcolor() {
  HexcolorContext *_localctx = _tracker.createInstance<HexcolorContext>(_ctx, getState());
  enterRule(_localctx, 78, css3Parser::RuleHexcolor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(664);
    match(css3Parser::Hash);
    setState(665);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

css3Parser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::NumberContext::Number() {
  return getToken(css3Parser::Number, 0);
}

tree::TerminalNode* css3Parser::NumberContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::NumberContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::NumberContext::getRuleIndex() const {
  return css3Parser::RuleNumber;
}

void css3Parser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}

void css3Parser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

css3Parser::NumberContext* css3Parser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 80, css3Parser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(668);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(667);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(670);
    match(css3Parser::Number);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PercentageContext ------------------------------------------------------------------

css3Parser::PercentageContext::PercentageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PercentageContext::Percentage() {
  return getToken(css3Parser::Percentage, 0);
}

tree::TerminalNode* css3Parser::PercentageContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::PercentageContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::PercentageContext::getRuleIndex() const {
  return css3Parser::RulePercentage;
}

void css3Parser::PercentageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPercentage(this);
}

void css3Parser::PercentageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPercentage(this);
}

css3Parser::PercentageContext* css3Parser::percentage() {
  PercentageContext *_localctx = _tracker.createInstance<PercentageContext>(_ctx, getState());
  enterRule(_localctx, 82, css3Parser::RulePercentage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(672);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(675);
    match(css3Parser::Percentage);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimensionContext ------------------------------------------------------------------

css3Parser::DimensionContext::DimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::DimensionContext::Dimension() {
  return getToken(css3Parser::Dimension, 0);
}

tree::TerminalNode* css3Parser::DimensionContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::DimensionContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::DimensionContext::getRuleIndex() const {
  return css3Parser::RuleDimension;
}

void css3Parser::DimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimension(this);
}

void css3Parser::DimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimension(this);
}

css3Parser::DimensionContext* css3Parser::dimension() {
  DimensionContext *_localctx = _tracker.createInstance<DimensionContext>(_ctx, getState());
  enterRule(_localctx, 84, css3Parser::RuleDimension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(678);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(677);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(680);
    match(css3Parser::Dimension);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnknownDimensionContext ------------------------------------------------------------------

css3Parser::UnknownDimensionContext::UnknownDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::UnknownDimensionContext::UnknownDimension() {
  return getToken(css3Parser::UnknownDimension, 0);
}

tree::TerminalNode* css3Parser::UnknownDimensionContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::UnknownDimensionContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::UnknownDimensionContext::getRuleIndex() const {
  return css3Parser::RuleUnknownDimension;
}

void css3Parser::UnknownDimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownDimension(this);
}

void css3Parser::UnknownDimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownDimension(this);
}

css3Parser::UnknownDimensionContext* css3Parser::unknownDimension() {
  UnknownDimensionContext *_localctx = _tracker.createInstance<UnknownDimensionContext>(_ctx, getState());
  enterRule(_localctx, 86, css3Parser::RuleUnknownDimension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(682);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(685);
    match(css3Parser::UnknownDimension);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Any_Context ------------------------------------------------------------------

css3Parser::Any_Context::Any_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::Any_Context::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::Any_Context::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::Any_Context::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::NumberContext* css3Parser::Any_Context::number() {
  return getRuleContext<css3Parser::NumberContext>(0);
}

css3Parser::PercentageContext* css3Parser::Any_Context::percentage() {
  return getRuleContext<css3Parser::PercentageContext>(0);
}

css3Parser::DimensionContext* css3Parser::Any_Context::dimension() {
  return getRuleContext<css3Parser::DimensionContext>(0);
}

css3Parser::UnknownDimensionContext* css3Parser::Any_Context::unknownDimension() {
  return getRuleContext<css3Parser::UnknownDimensionContext>(0);
}

tree::TerminalNode* css3Parser::Any_Context::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::Any_Context::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

tree::TerminalNode* css3Parser::Any_Context::Hash() {
  return getToken(css3Parser::Hash, 0);
}

tree::TerminalNode* css3Parser::Any_Context::UnicodeRange() {
  return getToken(css3Parser::UnicodeRange, 0);
}

tree::TerminalNode* css3Parser::Any_Context::Includes() {
  return getToken(css3Parser::Includes, 0);
}

tree::TerminalNode* css3Parser::Any_Context::DashMatch() {
  return getToken(css3Parser::DashMatch, 0);
}

tree::TerminalNode* css3Parser::Any_Context::Colon() {
  return getToken(css3Parser::Colon, 0);
}

tree::TerminalNode* css3Parser::Any_Context::Function_() {
  return getToken(css3Parser::Function_, 0);
}

tree::TerminalNode* css3Parser::Any_Context::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::Any_Context::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::Any_Context::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::UnusedContext *> css3Parser::Any_Context::unused() {
  return getRuleContexts<css3Parser::UnusedContext>();
}

css3Parser::UnusedContext* css3Parser::Any_Context::unused(size_t i) {
  return getRuleContext<css3Parser::UnusedContext>(i);
}

tree::TerminalNode* css3Parser::Any_Context::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

tree::TerminalNode* css3Parser::Any_Context::OpenBracket() {
  return getToken(css3Parser::OpenBracket, 0);
}

tree::TerminalNode* css3Parser::Any_Context::CloseBracket() {
  return getToken(css3Parser::CloseBracket, 0);
}


size_t css3Parser::Any_Context::getRuleIndex() const {
  return css3Parser::RuleAny_;
}

void css3Parser::Any_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAny_(this);
}

void css3Parser::Any_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAny_(this);
}

css3Parser::Any_Context* css3Parser::any_() {
  Any_Context *_localctx = _tracker.createInstance<Any_Context>(_ctx, getState());
  enterRule(_localctx, 88, css3Parser::RuleAny_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(687);
      ident();
      setState(688);
      ws();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(690);
      number();
      setState(691);
      ws();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(693);
      percentage();
      setState(694);
      ws();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(696);
      dimension();
      setState(697);
      ws();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(699);
      unknownDimension();
      setState(700);
      ws();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(702);
      match(css3Parser::String_);
      setState(703);
      ws();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(704);
      url();
      setState(705);
      ws();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(707);
      match(css3Parser::Hash);
      setState(708);
      ws();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(709);
      match(css3Parser::UnicodeRange);
      setState(710);
      ws();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(711);
      match(css3Parser::Includes);
      setState(712);
      ws();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(713);
      match(css3Parser::DashMatch);
      setState(714);
      ws();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(715);
      match(css3Parser::Colon);
      setState(716);
      ws();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(717);
      match(css3Parser::Function_);
      setState(718);
      ws();
      setState(723);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4020561629828808022) != 0)) {
        setState(721);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case css3Parser::OpenBracket:
          case css3Parser::OpenParen:
          case css3Parser::Colon:
          case css3Parser::Url:
          case css3Parser::Includes:
          case css3Parser::DashMatch:
          case css3Parser::Hash:
          case css3Parser::Percentage:
          case css3Parser::Url_:
          case css3Parser::UnicodeRange:
          case css3Parser::MediaOnly:
          case css3Parser::Not:
          case css3Parser::And:
          case css3Parser::Dimension:
          case css3Parser::UnknownDimension:
          case css3Parser::Plus:
          case css3Parser::Minus:
          case css3Parser::Number:
          case css3Parser::String_:
          case css3Parser::Or:
          case css3Parser::From:
          case css3Parser::To:
          case css3Parser::Ident:
          case css3Parser::Function_: {
            setState(719);
            any_();
            break;
          }

          case css3Parser::OpenBrace:
          case css3Parser::SemiColon:
          case css3Parser::Cdo:
          case css3Parser::Cdc:
          case css3Parser::AtKeyword: {
            setState(720);
            unused();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(725);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(726);
      match(css3Parser::CloseParen);
      setState(727);
      ws();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(729);
      match(css3Parser::OpenParen);
      setState(730);
      ws();
      setState(735);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4020561629828808022) != 0)) {
        setState(733);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case css3Parser::OpenBracket:
          case css3Parser::OpenParen:
          case css3Parser::Colon:
          case css3Parser::Url:
          case css3Parser::Includes:
          case css3Parser::DashMatch:
          case css3Parser::Hash:
          case css3Parser::Percentage:
          case css3Parser::Url_:
          case css3Parser::UnicodeRange:
          case css3Parser::MediaOnly:
          case css3Parser::Not:
          case css3Parser::And:
          case css3Parser::Dimension:
          case css3Parser::UnknownDimension:
          case css3Parser::Plus:
          case css3Parser::Minus:
          case css3Parser::Number:
          case css3Parser::String_:
          case css3Parser::Or:
          case css3Parser::From:
          case css3Parser::To:
          case css3Parser::Ident:
          case css3Parser::Function_: {
            setState(731);
            any_();
            break;
          }

          case css3Parser::OpenBrace:
          case css3Parser::SemiColon:
          case css3Parser::Cdo:
          case css3Parser::Cdc:
          case css3Parser::AtKeyword: {
            setState(732);
            unused();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(737);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(738);
      match(css3Parser::CloseParen);
      setState(739);
      ws();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(741);
      match(css3Parser::OpenBracket);
      setState(742);
      ws();
      setState(747);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4020561629828808022) != 0)) {
        setState(745);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case css3Parser::OpenBracket:
          case css3Parser::OpenParen:
          case css3Parser::Colon:
          case css3Parser::Url:
          case css3Parser::Includes:
          case css3Parser::DashMatch:
          case css3Parser::Hash:
          case css3Parser::Percentage:
          case css3Parser::Url_:
          case css3Parser::UnicodeRange:
          case css3Parser::MediaOnly:
          case css3Parser::Not:
          case css3Parser::And:
          case css3Parser::Dimension:
          case css3Parser::UnknownDimension:
          case css3Parser::Plus:
          case css3Parser::Minus:
          case css3Parser::Number:
          case css3Parser::String_:
          case css3Parser::Or:
          case css3Parser::From:
          case css3Parser::To:
          case css3Parser::Ident:
          case css3Parser::Function_: {
            setState(743);
            any_();
            break;
          }

          case css3Parser::OpenBrace:
          case css3Parser::SemiColon:
          case css3Parser::Cdo:
          case css3Parser::Cdc:
          case css3Parser::AtKeyword: {
            setState(744);
            unused();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(749);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(750);
      match(css3Parser::CloseBracket);
      setState(751);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtRuleContext ------------------------------------------------------------------

css3Parser::AtRuleContext::AtRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::AtRuleContext::getRuleIndex() const {
  return css3Parser::RuleAtRule;
}

void css3Parser::AtRuleContext::copyFrom(AtRuleContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnknownAtRuleContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::UnknownAtRuleContext::AtKeyword() {
  return getToken(css3Parser::AtKeyword, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::UnknownAtRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::UnknownAtRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::BlockContext* css3Parser::UnknownAtRuleContext::block() {
  return getRuleContext<css3Parser::BlockContext>(0);
}

tree::TerminalNode* css3Parser::UnknownAtRuleContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::UnknownAtRuleContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::UnknownAtRuleContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

css3Parser::UnknownAtRuleContext::UnknownAtRuleContext(AtRuleContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownAtRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownAtRule(this);
}
void css3Parser::UnknownAtRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownAtRule(this);
}
css3Parser::AtRuleContext* css3Parser::atRule() {
  AtRuleContext *_localctx = _tracker.createInstance<AtRuleContext>(_ctx, getState());
  enterRule(_localctx, 90, css3Parser::RuleAtRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    _localctx = _tracker.createInstance<css3Parser::UnknownAtRuleContext>(_localctx);
    enterOuterAlt(_localctx, 1);
    setState(755);
    match(css3Parser::AtKeyword);
    setState(756);
    ws();
    setState(760);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4597022382133018102) != 0)) {
      setState(757);
      any_();
      setState(762);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(766);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenBrace: {
        setState(763);
        block();
        break;
      }

      case css3Parser::SemiColon: {
        setState(764);
        match(css3Parser::SemiColon);
        setState(765);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnusedContext ------------------------------------------------------------------

css3Parser::UnusedContext::UnusedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::BlockContext* css3Parser::UnusedContext::block() {
  return getRuleContext<css3Parser::BlockContext>(0);
}

tree::TerminalNode* css3Parser::UnusedContext::AtKeyword() {
  return getToken(css3Parser::AtKeyword, 0);
}

css3Parser::WsContext* css3Parser::UnusedContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::UnusedContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

tree::TerminalNode* css3Parser::UnusedContext::Cdo() {
  return getToken(css3Parser::Cdo, 0);
}

tree::TerminalNode* css3Parser::UnusedContext::Cdc() {
  return getToken(css3Parser::Cdc, 0);
}


size_t css3Parser::UnusedContext::getRuleIndex() const {
  return css3Parser::RuleUnused;
}

void css3Parser::UnusedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnused(this);
}

void css3Parser::UnusedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnused(this);
}

css3Parser::UnusedContext* css3Parser::unused() {
  UnusedContext *_localctx = _tracker.createInstance<UnusedContext>(_ctx, getState());
  enterRule(_localctx, 92, css3Parser::RuleUnused);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(777);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenBrace: {
        enterOuterAlt(_localctx, 1);
        setState(768);
        block();
        break;
      }

      case css3Parser::AtKeyword: {
        enterOuterAlt(_localctx, 2);
        setState(769);
        match(css3Parser::AtKeyword);
        setState(770);
        ws();
        break;
      }

      case css3Parser::SemiColon: {
        enterOuterAlt(_localctx, 3);
        setState(771);
        match(css3Parser::SemiColon);
        setState(772);
        ws();
        break;
      }

      case css3Parser::Cdo: {
        enterOuterAlt(_localctx, 4);
        setState(773);
        match(css3Parser::Cdo);
        setState(774);
        ws();
        break;
      }

      case css3Parser::Cdc: {
        enterOuterAlt(_localctx, 5);
        setState(775);
        match(css3Parser::Cdc);
        setState(776);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

css3Parser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::BlockContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BlockContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BlockContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::BlockContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::DeclarationListContext *> css3Parser::BlockContext::declarationList() {
  return getRuleContexts<css3Parser::DeclarationListContext>();
}

css3Parser::DeclarationListContext* css3Parser::BlockContext::declarationList(size_t i) {
  return getRuleContext<css3Parser::DeclarationListContext>(i);
}

std::vector<css3Parser::NestedStatementContext *> css3Parser::BlockContext::nestedStatement() {
  return getRuleContexts<css3Parser::NestedStatementContext>();
}

css3Parser::NestedStatementContext* css3Parser::BlockContext::nestedStatement(size_t i) {
  return getRuleContext<css3Parser::NestedStatementContext>(i);
}

std::vector<css3Parser::Any_Context *> css3Parser::BlockContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::BlockContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::BlockContext *> css3Parser::BlockContext::block() {
  return getRuleContexts<css3Parser::BlockContext>();
}

css3Parser::BlockContext* css3Parser::BlockContext::block(size_t i) {
  return getRuleContext<css3Parser::BlockContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::BlockContext::AtKeyword() {
  return getTokens(css3Parser::AtKeyword);
}

tree::TerminalNode* css3Parser::BlockContext::AtKeyword(size_t i) {
  return getToken(css3Parser::AtKeyword, i);
}

std::vector<tree::TerminalNode *> css3Parser::BlockContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::BlockContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::BlockContext::getRuleIndex() const {
  return css3Parser::RuleBlock;
}

void css3Parser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void css3Parser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

css3Parser::BlockContext* css3Parser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 94, css3Parser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(779);
    match(css3Parser::OpenBrace);
    setState(780);
    ws();
    setState(791);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2612337923249312086) != 0)) {
      setState(789);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
      case 1: {
        setState(781);
        declarationList();
        break;
      }

      case 2: {
        setState(782);
        nestedStatement();
        break;
      }

      case 3: {
        setState(783);
        any_();
        break;
      }

      case 4: {
        setState(784);
        block();
        break;
      }

      case 5: {
        setState(785);
        match(css3Parser::AtKeyword);
        setState(786);
        ws();
        break;
      }

      case 6: {
        setState(787);
        match(css3Parser::SemiColon);
        setState(788);
        ws();
        break;
      }

      default:
        break;
      }
      setState(793);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(794);
    match(css3Parser::CloseBrace);
    setState(795);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedStatementContext ------------------------------------------------------------------

css3Parser::NestedStatementContext::NestedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::RulesetContext* css3Parser::NestedStatementContext::ruleset() {
  return getRuleContext<css3Parser::RulesetContext>(0);
}

css3Parser::MediaContext* css3Parser::NestedStatementContext::media() {
  return getRuleContext<css3Parser::MediaContext>(0);
}

css3Parser::PageContext* css3Parser::NestedStatementContext::page() {
  return getRuleContext<css3Parser::PageContext>(0);
}

css3Parser::FontFaceRuleContext* css3Parser::NestedStatementContext::fontFaceRule() {
  return getRuleContext<css3Parser::FontFaceRuleContext>(0);
}

css3Parser::KeyframesRuleContext* css3Parser::NestedStatementContext::keyframesRule() {
  return getRuleContext<css3Parser::KeyframesRuleContext>(0);
}

css3Parser::SupportsRuleContext* css3Parser::NestedStatementContext::supportsRule() {
  return getRuleContext<css3Parser::SupportsRuleContext>(0);
}

css3Parser::ViewportContext* css3Parser::NestedStatementContext::viewport() {
  return getRuleContext<css3Parser::ViewportContext>(0);
}

css3Parser::CounterStyleContext* css3Parser::NestedStatementContext::counterStyle() {
  return getRuleContext<css3Parser::CounterStyleContext>(0);
}

css3Parser::FontFeatureValuesRuleContext* css3Parser::NestedStatementContext::fontFeatureValuesRule() {
  return getRuleContext<css3Parser::FontFeatureValuesRuleContext>(0);
}

css3Parser::AtRuleContext* css3Parser::NestedStatementContext::atRule() {
  return getRuleContext<css3Parser::AtRuleContext>(0);
}


size_t css3Parser::NestedStatementContext::getRuleIndex() const {
  return css3Parser::RuleNestedStatement;
}

void css3Parser::NestedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNestedStatement(this);
}

void css3Parser::NestedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNestedStatement(this);
}

css3Parser::NestedStatementContext* css3Parser::nestedStatement() {
  NestedStatementContext *_localctx = _tracker.createInstance<NestedStatementContext>(_ctx, getState());
  enterRule(_localctx, 96, css3Parser::RuleNestedStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(807);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenBracket:
      case css3Parser::OpenParen:
      case css3Parser::OpenBrace:
      case css3Parser::Colon:
      case css3Parser::Dot:
      case css3Parser::Multiply:
      case css3Parser::Pipe:
      case css3Parser::Url:
      case css3Parser::Includes:
      case css3Parser::DashMatch:
      case css3Parser::Hash:
      case css3Parser::Percentage:
      case css3Parser::Url_:
      case css3Parser::UnicodeRange:
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Dimension:
      case css3Parser::UnknownDimension:
      case css3Parser::Plus:
      case css3Parser::Minus:
      case css3Parser::PseudoNot:
      case css3Parser::Number:
      case css3Parser::String_:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident:
      case css3Parser::Function_: {
        enterOuterAlt(_localctx, 1);
        setState(797);
        ruleset();
        break;
      }

      case css3Parser::Media: {
        enterOuterAlt(_localctx, 2);
        setState(798);
        media();
        break;
      }

      case css3Parser::Page: {
        enterOuterAlt(_localctx, 3);
        setState(799);
        page();
        break;
      }

      case css3Parser::FontFace: {
        enterOuterAlt(_localctx, 4);
        setState(800);
        fontFaceRule();
        break;
      }

      case css3Parser::Keyframes: {
        enterOuterAlt(_localctx, 5);
        setState(801);
        keyframesRule();
        break;
      }

      case css3Parser::Supports: {
        enterOuterAlt(_localctx, 6);
        setState(802);
        supportsRule();
        break;
      }

      case css3Parser::Viewport: {
        enterOuterAlt(_localctx, 7);
        setState(803);
        viewport();
        break;
      }

      case css3Parser::CounterStyle: {
        enterOuterAlt(_localctx, 8);
        setState(804);
        counterStyle();
        break;
      }

      case css3Parser::FontFeatureValues: {
        enterOuterAlt(_localctx, 9);
        setState(805);
        fontFeatureValuesRule();
        break;
      }

      case css3Parser::AtKeyword: {
        enterOuterAlt(_localctx, 10);
        setState(806);
        atRule();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupRuleBodyContext ------------------------------------------------------------------

css3Parser::GroupRuleBodyContext::GroupRuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::GroupRuleBodyContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GroupRuleBodyContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GroupRuleBodyContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::GroupRuleBodyContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::NestedStatementContext *> css3Parser::GroupRuleBodyContext::nestedStatement() {
  return getRuleContexts<css3Parser::NestedStatementContext>();
}

css3Parser::NestedStatementContext* css3Parser::GroupRuleBodyContext::nestedStatement(size_t i) {
  return getRuleContext<css3Parser::NestedStatementContext>(i);
}


size_t css3Parser::GroupRuleBodyContext::getRuleIndex() const {
  return css3Parser::RuleGroupRuleBody;
}

void css3Parser::GroupRuleBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupRuleBody(this);
}

void css3Parser::GroupRuleBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupRuleBody(this);
}

css3Parser::GroupRuleBodyContext* css3Parser::groupRuleBody() {
  GroupRuleBodyContext *_localctx = _tracker.createInstance<GroupRuleBodyContext>(_ctx, getState());
  enterRule(_localctx, 98, css3Parser::RuleGroupRuleBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(809);
    match(css3Parser::OpenBrace);
    setState(810);
    ws();
    setState(814);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3765259427856175574) != 0)) {
      setState(811);
      nestedStatement();
      setState(816);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(817);
    match(css3Parser::CloseBrace);
    setState(818);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsRuleContext ------------------------------------------------------------------

css3Parser::SupportsRuleContext::SupportsRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsRuleContext::Supports() {
  return getToken(css3Parser::Supports, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::SupportsConditionContext* css3Parser::SupportsRuleContext::supportsCondition() {
  return getRuleContext<css3Parser::SupportsConditionContext>(0);
}

css3Parser::GroupRuleBodyContext* css3Parser::SupportsRuleContext::groupRuleBody() {
  return getRuleContext<css3Parser::GroupRuleBodyContext>(0);
}


size_t css3Parser::SupportsRuleContext::getRuleIndex() const {
  return css3Parser::RuleSupportsRule;
}

void css3Parser::SupportsRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsRule(this);
}

void css3Parser::SupportsRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsRule(this);
}

css3Parser::SupportsRuleContext* css3Parser::supportsRule() {
  SupportsRuleContext *_localctx = _tracker.createInstance<SupportsRuleContext>(_ctx, getState());
  enterRule(_localctx, 100, css3Parser::RuleSupportsRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(820);
    match(css3Parser::Supports);
    setState(821);
    ws();
    setState(822);
    supportsCondition();
    setState(823);
    ws();
    setState(824);
    groupRuleBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsConditionContext ------------------------------------------------------------------

css3Parser::SupportsConditionContext::SupportsConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::SupportsNegationContext* css3Parser::SupportsConditionContext::supportsNegation() {
  return getRuleContext<css3Parser::SupportsNegationContext>(0);
}

css3Parser::SupportsConjunctionContext* css3Parser::SupportsConditionContext::supportsConjunction() {
  return getRuleContext<css3Parser::SupportsConjunctionContext>(0);
}

css3Parser::SupportsDisjunctionContext* css3Parser::SupportsConditionContext::supportsDisjunction() {
  return getRuleContext<css3Parser::SupportsDisjunctionContext>(0);
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsConditionContext::supportsConditionInParens() {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(0);
}


size_t css3Parser::SupportsConditionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsCondition;
}

void css3Parser::SupportsConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsCondition(this);
}

void css3Parser::SupportsConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsCondition(this);
}

css3Parser::SupportsConditionContext* css3Parser::supportsCondition() {
  SupportsConditionContext *_localctx = _tracker.createInstance<SupportsConditionContext>(_ctx, getState());
  enterRule(_localctx, 102, css3Parser::RuleSupportsCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(830);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(826);
      supportsNegation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(827);
      supportsConjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(828);
      supportsDisjunction();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(829);
      supportsConditionInParens();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsConditionInParensContext ------------------------------------------------------------------

css3Parser::SupportsConditionInParensContext::SupportsConditionInParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsConditionInParensContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsConditionInParensContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsConditionInParensContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::SupportsConditionContext* css3Parser::SupportsConditionInParensContext::supportsCondition() {
  return getRuleContext<css3Parser::SupportsConditionContext>(0);
}

tree::TerminalNode* css3Parser::SupportsConditionInParensContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

css3Parser::SupportsDeclarationConditionContext* css3Parser::SupportsConditionInParensContext::supportsDeclarationCondition() {
  return getRuleContext<css3Parser::SupportsDeclarationConditionContext>(0);
}

css3Parser::GeneralEnclosedContext* css3Parser::SupportsConditionInParensContext::generalEnclosed() {
  return getRuleContext<css3Parser::GeneralEnclosedContext>(0);
}


size_t css3Parser::SupportsConditionInParensContext::getRuleIndex() const {
  return css3Parser::RuleSupportsConditionInParens;
}

void css3Parser::SupportsConditionInParensContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsConditionInParens(this);
}

void css3Parser::SupportsConditionInParensContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsConditionInParens(this);
}

css3Parser::SupportsConditionInParensContext* css3Parser::supportsConditionInParens() {
  SupportsConditionInParensContext *_localctx = _tracker.createInstance<SupportsConditionInParensContext>(_ctx, getState());
  enterRule(_localctx, 104, css3Parser::RuleSupportsConditionInParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(840);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(832);
      match(css3Parser::OpenParen);
      setState(833);
      ws();
      setState(834);
      supportsCondition();
      setState(835);
      ws();
      setState(836);
      match(css3Parser::CloseParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(838);
      supportsDeclarationCondition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(839);
      generalEnclosed();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsNegationContext ------------------------------------------------------------------

css3Parser::SupportsNegationContext::SupportsNegationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsNegationContext::Not() {
  return getToken(css3Parser::Not, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsNegationContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsNegationContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::SupportsNegationContext::Space() {
  return getToken(css3Parser::Space, 0);
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsNegationContext::supportsConditionInParens() {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(0);
}


size_t css3Parser::SupportsNegationContext::getRuleIndex() const {
  return css3Parser::RuleSupportsNegation;
}

void css3Parser::SupportsNegationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsNegation(this);
}

void css3Parser::SupportsNegationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsNegation(this);
}

css3Parser::SupportsNegationContext* css3Parser::supportsNegation() {
  SupportsNegationContext *_localctx = _tracker.createInstance<SupportsNegationContext>(_ctx, getState());
  enterRule(_localctx, 106, css3Parser::RuleSupportsNegation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(842);
    match(css3Parser::Not);
    setState(843);
    ws();
    setState(844);
    match(css3Parser::Space);
    setState(845);
    ws();
    setState(846);
    supportsConditionInParens();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsConjunctionContext ------------------------------------------------------------------

css3Parser::SupportsConjunctionContext::SupportsConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SupportsConditionInParensContext *> css3Parser::SupportsConjunctionContext::supportsConditionInParens() {
  return getRuleContexts<css3Parser::SupportsConditionInParensContext>();
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsConjunctionContext::supportsConditionInParens(size_t i) {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsConjunctionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsConjunctionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsConjunctionContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::SupportsConjunctionContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsConjunctionContext::And() {
  return getTokens(css3Parser::And);
}

tree::TerminalNode* css3Parser::SupportsConjunctionContext::And(size_t i) {
  return getToken(css3Parser::And, i);
}


size_t css3Parser::SupportsConjunctionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsConjunction;
}

void css3Parser::SupportsConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsConjunction(this);
}

void css3Parser::SupportsConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsConjunction(this);
}

css3Parser::SupportsConjunctionContext* css3Parser::supportsConjunction() {
  SupportsConjunctionContext *_localctx = _tracker.createInstance<SupportsConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 108, css3Parser::RuleSupportsConjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(848);
    supportsConditionInParens();
    setState(858); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(849);
              ws();
              setState(850);
              match(css3Parser::Space);
              setState(851);
              ws();
              setState(852);
              match(css3Parser::And);
              setState(853);
              ws();
              setState(854);
              match(css3Parser::Space);
              setState(855);
              ws();
              setState(856);
              supportsConditionInParens();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(860); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsDisjunctionContext ------------------------------------------------------------------

css3Parser::SupportsDisjunctionContext::SupportsDisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SupportsConditionInParensContext *> css3Parser::SupportsDisjunctionContext::supportsConditionInParens() {
  return getRuleContexts<css3Parser::SupportsConditionInParensContext>();
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsDisjunctionContext::supportsConditionInParens(size_t i) {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsDisjunctionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsDisjunctionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsDisjunctionContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::SupportsDisjunctionContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsDisjunctionContext::Or() {
  return getTokens(css3Parser::Or);
}

tree::TerminalNode* css3Parser::SupportsDisjunctionContext::Or(size_t i) {
  return getToken(css3Parser::Or, i);
}


size_t css3Parser::SupportsDisjunctionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsDisjunction;
}

void css3Parser::SupportsDisjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsDisjunction(this);
}

void css3Parser::SupportsDisjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsDisjunction(this);
}

css3Parser::SupportsDisjunctionContext* css3Parser::supportsDisjunction() {
  SupportsDisjunctionContext *_localctx = _tracker.createInstance<SupportsDisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 110, css3Parser::RuleSupportsDisjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(862);
    supportsConditionInParens();
    setState(872); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(863);
              ws();
              setState(864);
              match(css3Parser::Space);
              setState(865);
              ws();
              setState(866);
              match(css3Parser::Or);
              setState(867);
              ws();
              setState(868);
              match(css3Parser::Space);
              setState(869);
              ws();
              setState(870);
              supportsConditionInParens();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(874); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsDeclarationConditionContext ------------------------------------------------------------------

css3Parser::SupportsDeclarationConditionContext::SupportsDeclarationConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsDeclarationConditionContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

css3Parser::WsContext* css3Parser::SupportsDeclarationConditionContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::DeclarationContext* css3Parser::SupportsDeclarationConditionContext::declaration() {
  return getRuleContext<css3Parser::DeclarationContext>(0);
}

tree::TerminalNode* css3Parser::SupportsDeclarationConditionContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::SupportsDeclarationConditionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsDeclarationCondition;
}

void css3Parser::SupportsDeclarationConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsDeclarationCondition(this);
}

void css3Parser::SupportsDeclarationConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsDeclarationCondition(this);
}

css3Parser::SupportsDeclarationConditionContext* css3Parser::supportsDeclarationCondition() {
  SupportsDeclarationConditionContext *_localctx = _tracker.createInstance<SupportsDeclarationConditionContext>(_ctx, getState());
  enterRule(_localctx, 112, css3Parser::RuleSupportsDeclarationCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(876);
    match(css3Parser::OpenParen);
    setState(877);
    ws();
    setState(878);
    declaration();
    setState(879);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralEnclosedContext ------------------------------------------------------------------

css3Parser::GeneralEnclosedContext::GeneralEnclosedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::GeneralEnclosedContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::GeneralEnclosedContext::Function_() {
  return getToken(css3Parser::Function_, 0);
}

tree::TerminalNode* css3Parser::GeneralEnclosedContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::GeneralEnclosedContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::GeneralEnclosedContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::UnusedContext *> css3Parser::GeneralEnclosedContext::unused() {
  return getRuleContexts<css3Parser::UnusedContext>();
}

css3Parser::UnusedContext* css3Parser::GeneralEnclosedContext::unused(size_t i) {
  return getRuleContext<css3Parser::UnusedContext>(i);
}


size_t css3Parser::GeneralEnclosedContext::getRuleIndex() const {
  return css3Parser::RuleGeneralEnclosed;
}

void css3Parser::GeneralEnclosedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneralEnclosed(this);
}

void css3Parser::GeneralEnclosedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneralEnclosed(this);
}

css3Parser::GeneralEnclosedContext* css3Parser::generalEnclosed() {
  GeneralEnclosedContext *_localctx = _tracker.createInstance<GeneralEnclosedContext>(_ctx, getState());
  enterRule(_localctx, 114, css3Parser::RuleGeneralEnclosed);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    _la = _input->LA(1);
    if (!(_la == css3Parser::OpenParen

    || _la == css3Parser::Function_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(886);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4020561629828808022) != 0)) {
      setState(884);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::OpenBracket:
        case css3Parser::OpenParen:
        case css3Parser::Colon:
        case css3Parser::Url:
        case css3Parser::Includes:
        case css3Parser::DashMatch:
        case css3Parser::Hash:
        case css3Parser::Percentage:
        case css3Parser::Url_:
        case css3Parser::UnicodeRange:
        case css3Parser::MediaOnly:
        case css3Parser::Not:
        case css3Parser::And:
        case css3Parser::Dimension:
        case css3Parser::UnknownDimension:
        case css3Parser::Plus:
        case css3Parser::Minus:
        case css3Parser::Number:
        case css3Parser::String_:
        case css3Parser::Or:
        case css3Parser::From:
        case css3Parser::To:
        case css3Parser::Ident:
        case css3Parser::Function_: {
          setState(882);
          any_();
          break;
        }

        case css3Parser::OpenBrace:
        case css3Parser::SemiColon:
        case css3Parser::Cdo:
        case css3Parser::Cdc:
        case css3Parser::AtKeyword: {
          setState(883);
          unused();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(888);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(889);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UrlContext ------------------------------------------------------------------

css3Parser::UrlContext::UrlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::UrlContext::Url_() {
  return getToken(css3Parser::Url_, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::UrlContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::UrlContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::UrlContext::String_() {
  return getToken(css3Parser::String_, 0);
}

tree::TerminalNode* css3Parser::UrlContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::UrlContext::Url() {
  return getToken(css3Parser::Url, 0);
}


size_t css3Parser::UrlContext::getRuleIndex() const {
  return css3Parser::RuleUrl;
}

void css3Parser::UrlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUrl(this);
}

void css3Parser::UrlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUrl(this);
}

css3Parser::UrlContext* css3Parser::url() {
  UrlContext *_localctx = _tracker.createInstance<UrlContext>(_ctx, getState());
  enterRule(_localctx, 116, css3Parser::RuleUrl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(898);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Url_: {
        enterOuterAlt(_localctx, 1);
        setState(891);
        match(css3Parser::Url_);
        setState(892);
        ws();
        setState(893);
        match(css3Parser::String_);
        setState(894);
        ws();
        setState(895);
        match(css3Parser::CloseParen);
        break;
      }

      case css3Parser::Url: {
        enterOuterAlt(_localctx, 2);
        setState(897);
        match(css3Parser::Url);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Var_Context ------------------------------------------------------------------

css3Parser::Var_Context::Var_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::Var_Context::Var() {
  return getToken(css3Parser::Var, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::Var_Context::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::Var_Context::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::Var_Context::Variable() {
  return getToken(css3Parser::Variable, 0);
}

tree::TerminalNode* css3Parser::Var_Context::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::Var_Context::getRuleIndex() const {
  return css3Parser::RuleVar_;
}

void css3Parser::Var_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVar_(this);
}

void css3Parser::Var_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVar_(this);
}

css3Parser::Var_Context* css3Parser::var_() {
  Var_Context *_localctx = _tracker.createInstance<Var_Context>(_ctx, getState());
  enterRule(_localctx, 118, css3Parser::RuleVar_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(900);
    match(css3Parser::Var);
    setState(901);
    ws();
    setState(902);
    match(css3Parser::Variable);
    setState(903);
    ws();
    setState(904);
    match(css3Parser::CloseParen);
    setState(905);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcContext ------------------------------------------------------------------

css3Parser::CalcContext::CalcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CalcContext::Calc() {
  return getToken(css3Parser::Calc, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::CalcSumContext* css3Parser::CalcContext::calcSum() {
  return getRuleContext<css3Parser::CalcSumContext>(0);
}

tree::TerminalNode* css3Parser::CalcContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::CalcContext::getRuleIndex() const {
  return css3Parser::RuleCalc;
}

void css3Parser::CalcContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalc(this);
}

void css3Parser::CalcContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalc(this);
}

css3Parser::CalcContext* css3Parser::calc() {
  CalcContext *_localctx = _tracker.createInstance<CalcContext>(_ctx, getState());
  enterRule(_localctx, 120, css3Parser::RuleCalc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(907);
    match(css3Parser::Calc);
    setState(908);
    ws();
    setState(909);
    calcSum();
    setState(910);
    match(css3Parser::CloseParen);
    setState(911);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcSumContext ------------------------------------------------------------------

css3Parser::CalcSumContext::CalcSumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::CalcProductContext *> css3Parser::CalcSumContext::calcProduct() {
  return getRuleContexts<css3Parser::CalcProductContext>();
}

css3Parser::CalcProductContext* css3Parser::CalcSumContext::calcProduct(size_t i) {
  return getRuleContext<css3Parser::CalcProductContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcSumContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::CalcSumContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcSumContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcSumContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcSumContext::Plus() {
  return getTokens(css3Parser::Plus);
}

tree::TerminalNode* css3Parser::CalcSumContext::Plus(size_t i) {
  return getToken(css3Parser::Plus, i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcSumContext::Minus() {
  return getTokens(css3Parser::Minus);
}

tree::TerminalNode* css3Parser::CalcSumContext::Minus(size_t i) {
  return getToken(css3Parser::Minus, i);
}


size_t css3Parser::CalcSumContext::getRuleIndex() const {
  return css3Parser::RuleCalcSum;
}

void css3Parser::CalcSumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcSum(this);
}

void css3Parser::CalcSumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcSum(this);
}

css3Parser::CalcSumContext* css3Parser::calcSum() {
  CalcSumContext *_localctx = _tracker.createInstance<CalcSumContext>(_ctx, getState());
  enterRule(_localctx, 122, css3Parser::RuleCalcSum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(913);
    calcProduct();
    setState(924);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Space) {
      setState(914);
      match(css3Parser::Space);
      setState(915);
      ws();
      setState(916);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(917);
      ws();
      setState(918);
      match(css3Parser::Space);
      setState(919);
      ws();
      setState(920);
      calcProduct();
      setState(926);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcProductContext ------------------------------------------------------------------

css3Parser::CalcProductContext::CalcProductContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::CalcValueContext *> css3Parser::CalcProductContext::calcValue() {
  return getRuleContexts<css3Parser::CalcValueContext>();
}

css3Parser::CalcValueContext* css3Parser::CalcProductContext::calcValue(size_t i) {
  return getRuleContext<css3Parser::CalcValueContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcProductContext::Multiply() {
  return getTokens(css3Parser::Multiply);
}

tree::TerminalNode* css3Parser::CalcProductContext::Multiply(size_t i) {
  return getToken(css3Parser::Multiply, i);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcProductContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcProductContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcProductContext::Divide() {
  return getTokens(css3Parser::Divide);
}

tree::TerminalNode* css3Parser::CalcProductContext::Divide(size_t i) {
  return getToken(css3Parser::Divide, i);
}

std::vector<css3Parser::NumberContext *> css3Parser::CalcProductContext::number() {
  return getRuleContexts<css3Parser::NumberContext>();
}

css3Parser::NumberContext* css3Parser::CalcProductContext::number(size_t i) {
  return getRuleContext<css3Parser::NumberContext>(i);
}


size_t css3Parser::CalcProductContext::getRuleIndex() const {
  return css3Parser::RuleCalcProduct;
}

void css3Parser::CalcProductContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcProduct(this);
}

void css3Parser::CalcProductContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcProduct(this);
}

css3Parser::CalcProductContext* css3Parser::calcProduct() {
  CalcProductContext *_localctx = _tracker.createInstance<CalcProductContext>(_ctx, getState());
  enterRule(_localctx, 124, css3Parser::RuleCalcProduct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(927);
    calcValue();
    setState(939);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Multiply

    || _la == css3Parser::Divide) {
      setState(937);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::Multiply: {
          setState(928);
          match(css3Parser::Multiply);
          setState(929);
          ws();
          setState(930);
          calcValue();
          break;
        }

        case css3Parser::Divide: {
          setState(932);
          match(css3Parser::Divide);
          setState(933);
          ws();
          setState(934);
          number();
          setState(935);
          ws();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(941);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcValueContext ------------------------------------------------------------------

css3Parser::CalcValueContext::CalcValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::NumberContext* css3Parser::CalcValueContext::number() {
  return getRuleContext<css3Parser::NumberContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcValueContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcValueContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::DimensionContext* css3Parser::CalcValueContext::dimension() {
  return getRuleContext<css3Parser::DimensionContext>(0);
}

css3Parser::UnknownDimensionContext* css3Parser::CalcValueContext::unknownDimension() {
  return getRuleContext<css3Parser::UnknownDimensionContext>(0);
}

css3Parser::PercentageContext* css3Parser::CalcValueContext::percentage() {
  return getRuleContext<css3Parser::PercentageContext>(0);
}

tree::TerminalNode* css3Parser::CalcValueContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

css3Parser::CalcSumContext* css3Parser::CalcValueContext::calcSum() {
  return getRuleContext<css3Parser::CalcSumContext>(0);
}

tree::TerminalNode* css3Parser::CalcValueContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::CalcValueContext::getRuleIndex() const {
  return css3Parser::RuleCalcValue;
}

void css3Parser::CalcValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcValue(this);
}

void css3Parser::CalcValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcValue(this);
}

css3Parser::CalcValueContext* css3Parser::calcValue() {
  CalcValueContext *_localctx = _tracker.createInstance<CalcValueContext>(_ctx, getState());
  enterRule(_localctx, 126, css3Parser::RuleCalcValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(960);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(942);
      number();
      setState(943);
      ws();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(945);
      dimension();
      setState(946);
      ws();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(948);
      unknownDimension();
      setState(949);
      ws();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(951);
      percentage();
      setState(952);
      ws();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(954);
      match(css3Parser::OpenParen);
      setState(955);
      ws();
      setState(956);
      calcSum();
      setState(957);
      match(css3Parser::CloseParen);
      setState(958);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFaceRuleContext ------------------------------------------------------------------

css3Parser::FontFaceRuleContext::FontFaceRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::FontFace() {
  return getToken(css3Parser::FontFace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFaceRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFaceRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::FontFaceDeclarationContext *> css3Parser::FontFaceRuleContext::fontFaceDeclaration() {
  return getRuleContexts<css3Parser::FontFaceDeclarationContext>();
}

css3Parser::FontFaceDeclarationContext* css3Parser::FontFaceRuleContext::fontFaceDeclaration(size_t i) {
  return getRuleContext<css3Parser::FontFaceDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::FontFaceRuleContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::FontFaceRuleContext::getRuleIndex() const {
  return css3Parser::RuleFontFaceRule;
}

void css3Parser::FontFaceRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFaceRule(this);
}

void css3Parser::FontFaceRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFaceRule(this);
}

css3Parser::FontFaceRuleContext* css3Parser::fontFaceRule() {
  FontFaceRuleContext *_localctx = _tracker.createInstance<FontFaceRuleContext>(_ctx, getState());
  enterRule(_localctx, 128, css3Parser::RuleFontFaceRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(962);
    match(css3Parser::FontFace);
    setState(963);
    ws();
    setState(964);
    match(css3Parser::OpenBrace);
    setState(965);
    ws();
    setState(967);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5779244251887978496) != 0)) {
      setState(966);
      fontFaceDeclaration();
    }
    setState(976);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::SemiColon) {
      setState(969);
      match(css3Parser::SemiColon);
      setState(970);
      ws();
      setState(972);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5779244251887978496) != 0)) {
        setState(971);
        fontFaceDeclaration();
      }
      setState(978);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(979);
    match(css3Parser::CloseBrace);
    setState(980);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFaceDeclarationContext ------------------------------------------------------------------

css3Parser::FontFaceDeclarationContext::FontFaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::FontFaceDeclarationContext::getRuleIndex() const {
  return css3Parser::RuleFontFaceDeclaration;
}

void css3Parser::FontFaceDeclarationContext::copyFrom(FontFaceDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- KnownFontFaceDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::KnownFontFaceDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::KnownFontFaceDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::KnownFontFaceDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ExprContext* css3Parser::KnownFontFaceDeclarationContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

css3Parser::KnownFontFaceDeclarationContext::KnownFontFaceDeclarationContext(FontFaceDeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownFontFaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownFontFaceDeclaration(this);
}
void css3Parser::KnownFontFaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownFontFaceDeclaration(this);
}
//----------------- UnknownFontFaceDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::UnknownFontFaceDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::UnknownFontFaceDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::UnknownFontFaceDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ValueContext* css3Parser::UnknownFontFaceDeclarationContext::value() {
  return getRuleContext<css3Parser::ValueContext>(0);
}

css3Parser::UnknownFontFaceDeclarationContext::UnknownFontFaceDeclarationContext(FontFaceDeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownFontFaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownFontFaceDeclaration(this);
}
void css3Parser::UnknownFontFaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownFontFaceDeclaration(this);
}
css3Parser::FontFaceDeclarationContext* css3Parser::fontFaceDeclaration() {
  FontFaceDeclarationContext *_localctx = _tracker.createInstance<FontFaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 130, css3Parser::RuleFontFaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(992);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownFontFaceDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(982);
      property_();
      setState(983);
      match(css3Parser::Colon);
      setState(984);
      ws();
      setState(985);
      expr();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::UnknownFontFaceDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(987);
      property_();
      setState(988);
      match(css3Parser::Colon);
      setState(989);
      ws();
      setState(990);
      value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeyframesRuleContext ------------------------------------------------------------------

css3Parser::KeyframesRuleContext::KeyframesRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::Keyframes() {
  return getToken(css3Parser::Keyframes, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::KeyframesRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KeyframesRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::Space() {
  return getToken(css3Parser::Space, 0);
}

css3Parser::IdentContext* css3Parser::KeyframesRuleContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::KeyframeBlockContext *> css3Parser::KeyframesRuleContext::keyframeBlock() {
  return getRuleContexts<css3Parser::KeyframeBlockContext>();
}

css3Parser::KeyframeBlockContext* css3Parser::KeyframesRuleContext::keyframeBlock(size_t i) {
  return getRuleContext<css3Parser::KeyframeBlockContext>(i);
}


size_t css3Parser::KeyframesRuleContext::getRuleIndex() const {
  return css3Parser::RuleKeyframesRule;
}

void css3Parser::KeyframesRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyframesRule(this);
}

void css3Parser::KeyframesRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyframesRule(this);
}

css3Parser::KeyframesRuleContext* css3Parser::keyframesRule() {
  KeyframesRuleContext *_localctx = _tracker.createInstance<KeyframesRuleContext>(_ctx, getState());
  enterRule(_localctx, 132, css3Parser::RuleKeyframesRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(994);
    match(css3Parser::Keyframes);
    setState(995);
    ws();
    setState(996);
    match(css3Parser::Space);
    setState(997);
    ws();
    setState(998);
    ident();
    setState(999);
    ws();
    setState(1000);
    match(css3Parser::OpenBrace);
    setState(1001);
    ws();
    setState(1005);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510799418982400) != 0)) {
      setState(1002);
      keyframeBlock();
      setState(1007);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1008);
    match(css3Parser::CloseBrace);
    setState(1009);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeyframeBlockContext ------------------------------------------------------------------

css3Parser::KeyframeBlockContext::KeyframeBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::KeyframeSelectorContext* css3Parser::KeyframeBlockContext::keyframeSelector() {
  return getRuleContext<css3Parser::KeyframeSelectorContext>(0);
}

tree::TerminalNode* css3Parser::KeyframeBlockContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::KeyframeBlockContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KeyframeBlockContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::KeyframeBlockContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::KeyframeBlockContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}


size_t css3Parser::KeyframeBlockContext::getRuleIndex() const {
  return css3Parser::RuleKeyframeBlock;
}

void css3Parser::KeyframeBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyframeBlock(this);
}

void css3Parser::KeyframeBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyframeBlock(this);
}

css3Parser::KeyframeBlockContext* css3Parser::keyframeBlock() {
  KeyframeBlockContext *_localctx = _tracker.createInstance<KeyframeBlockContext>(_ctx, getState());
  enterRule(_localctx, 134, css3Parser::RuleKeyframeBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1011);
    keyframeSelector();
    setState(1012);
    match(css3Parser::OpenBrace);
    setState(1013);
    ws();
    setState(1015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5779244251887978624) != 0)) {
      setState(1014);
      declarationList();
    }
    setState(1017);
    match(css3Parser::CloseBrace);
    setState(1018);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeyframeSelectorContext ------------------------------------------------------------------

css3Parser::KeyframeSelectorContext::KeyframeSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::KeyframeSelectorContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KeyframeSelectorContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::From() {
  return getTokens(css3Parser::From);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::From(size_t i) {
  return getToken(css3Parser::From, i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::To() {
  return getTokens(css3Parser::To);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::To(size_t i) {
  return getToken(css3Parser::To, i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::Percentage() {
  return getTokens(css3Parser::Percentage);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::Percentage(size_t i) {
  return getToken(css3Parser::Percentage, i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}


size_t css3Parser::KeyframeSelectorContext::getRuleIndex() const {
  return css3Parser::RuleKeyframeSelector;
}

void css3Parser::KeyframeSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyframeSelector(this);
}

void css3Parser::KeyframeSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyframeSelector(this);
}

css3Parser::KeyframeSelectorContext* css3Parser::keyframeSelector() {
  KeyframeSelectorContext *_localctx = _tracker.createInstance<KeyframeSelectorContext>(_ctx, getState());
  enterRule(_localctx, 136, css3Parser::RuleKeyframeSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1020);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510799418982400) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1021);
    ws();
    setState(1029);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Comma) {
      setState(1022);
      match(css3Parser::Comma);
      setState(1023);
      ws();
      setState(1024);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 13510799418982400) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1025);
      ws();
      setState(1031);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ViewportContext ------------------------------------------------------------------

css3Parser::ViewportContext::ViewportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::ViewportContext::Viewport() {
  return getToken(css3Parser::Viewport, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::ViewportContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ViewportContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::ViewportContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::ViewportContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::ViewportContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}


size_t css3Parser::ViewportContext::getRuleIndex() const {
  return css3Parser::RuleViewport;
}

void css3Parser::ViewportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterViewport(this);
}

void css3Parser::ViewportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitViewport(this);
}

css3Parser::ViewportContext* css3Parser::viewport() {
  ViewportContext *_localctx = _tracker.createInstance<ViewportContext>(_ctx, getState());
  enterRule(_localctx, 138, css3Parser::RuleViewport);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    match(css3Parser::Viewport);
    setState(1033);
    ws();
    setState(1034);
    match(css3Parser::OpenBrace);
    setState(1035);
    ws();
    setState(1037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5779244251887978624) != 0)) {
      setState(1036);
      declarationList();
    }
    setState(1039);
    match(css3Parser::CloseBrace);
    setState(1040);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CounterStyleContext ------------------------------------------------------------------

css3Parser::CounterStyleContext::CounterStyleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CounterStyleContext::CounterStyle() {
  return getToken(css3Parser::CounterStyle, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::CounterStyleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CounterStyleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::IdentContext* css3Parser::CounterStyleContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::CounterStyleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::CounterStyleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::CounterStyleContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}


size_t css3Parser::CounterStyleContext::getRuleIndex() const {
  return css3Parser::RuleCounterStyle;
}

void css3Parser::CounterStyleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCounterStyle(this);
}

void css3Parser::CounterStyleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCounterStyle(this);
}

css3Parser::CounterStyleContext* css3Parser::counterStyle() {
  CounterStyleContext *_localctx = _tracker.createInstance<CounterStyleContext>(_ctx, getState());
  enterRule(_localctx, 140, css3Parser::RuleCounterStyle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1042);
    match(css3Parser::CounterStyle);
    setState(1043);
    ws();
    setState(1044);
    ident();
    setState(1045);
    ws();
    setState(1046);
    match(css3Parser::OpenBrace);
    setState(1047);
    ws();
    setState(1049);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5779244251887978624) != 0)) {
      setState(1048);
      declarationList();
    }
    setState(1051);
    match(css3Parser::CloseBrace);
    setState(1052);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFeatureValuesRuleContext ------------------------------------------------------------------

css3Parser::FontFeatureValuesRuleContext::FontFeatureValuesRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FontFeatureValuesRuleContext::FontFeatureValues() {
  return getToken(css3Parser::FontFeatureValues, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFeatureValuesRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFeatureValuesRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::FontFamilyNameListContext* css3Parser::FontFeatureValuesRuleContext::fontFamilyNameList() {
  return getRuleContext<css3Parser::FontFamilyNameListContext>(0);
}

tree::TerminalNode* css3Parser::FontFeatureValuesRuleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::FontFeatureValuesRuleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::FeatureValueBlockContext *> css3Parser::FontFeatureValuesRuleContext::featureValueBlock() {
  return getRuleContexts<css3Parser::FeatureValueBlockContext>();
}

css3Parser::FeatureValueBlockContext* css3Parser::FontFeatureValuesRuleContext::featureValueBlock(size_t i) {
  return getRuleContext<css3Parser::FeatureValueBlockContext>(i);
}


size_t css3Parser::FontFeatureValuesRuleContext::getRuleIndex() const {
  return css3Parser::RuleFontFeatureValuesRule;
}

void css3Parser::FontFeatureValuesRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFeatureValuesRule(this);
}

void css3Parser::FontFeatureValuesRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFeatureValuesRule(this);
}

css3Parser::FontFeatureValuesRuleContext* css3Parser::fontFeatureValuesRule() {
  FontFeatureValuesRuleContext *_localctx = _tracker.createInstance<FontFeatureValuesRuleContext>(_ctx, getState());
  enterRule(_localctx, 142, css3Parser::RuleFontFeatureValuesRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054);
    match(css3Parser::FontFeatureValues);
    setState(1055);
    ws();
    setState(1056);
    fontFamilyNameList();
    setState(1057);
    ws();
    setState(1058);
    match(css3Parser::OpenBrace);
    setState(1059);
    ws();
    setState(1063);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::AtKeyword) {
      setState(1060);
      featureValueBlock();
      setState(1065);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1066);
    match(css3Parser::CloseBrace);
    setState(1067);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFamilyNameListContext ------------------------------------------------------------------

css3Parser::FontFamilyNameListContext::FontFamilyNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::FontFamilyNameContext *> css3Parser::FontFamilyNameListContext::fontFamilyName() {
  return getRuleContexts<css3Parser::FontFamilyNameContext>();
}

css3Parser::FontFamilyNameContext* css3Parser::FontFamilyNameListContext::fontFamilyName(size_t i) {
  return getRuleContext<css3Parser::FontFamilyNameContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFamilyNameListContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFamilyNameListContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::FontFamilyNameListContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::FontFamilyNameListContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}


size_t css3Parser::FontFamilyNameListContext::getRuleIndex() const {
  return css3Parser::RuleFontFamilyNameList;
}

void css3Parser::FontFamilyNameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFamilyNameList(this);
}

void css3Parser::FontFamilyNameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFamilyNameList(this);
}

css3Parser::FontFamilyNameListContext* css3Parser::fontFamilyNameList() {
  FontFamilyNameListContext *_localctx = _tracker.createInstance<FontFamilyNameListContext>(_ctx, getState());
  enterRule(_localctx, 144, css3Parser::RuleFontFamilyNameList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1069);
    fontFamilyName();
    setState(1077);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1070);
        ws();
        setState(1071);
        match(css3Parser::Comma);
        setState(1072);
        ws();
        setState(1073);
        fontFamilyName(); 
      }
      setState(1079);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFamilyNameContext ------------------------------------------------------------------

css3Parser::FontFamilyNameContext::FontFamilyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FontFamilyNameContext::String_() {
  return getToken(css3Parser::String_, 0);
}

std::vector<css3Parser::IdentContext *> css3Parser::FontFamilyNameContext::ident() {
  return getRuleContexts<css3Parser::IdentContext>();
}

css3Parser::IdentContext* css3Parser::FontFamilyNameContext::ident(size_t i) {
  return getRuleContext<css3Parser::IdentContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFamilyNameContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFamilyNameContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}


size_t css3Parser::FontFamilyNameContext::getRuleIndex() const {
  return css3Parser::RuleFontFamilyName;
}

void css3Parser::FontFamilyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFamilyName(this);
}

void css3Parser::FontFamilyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFamilyName(this);
}

css3Parser::FontFamilyNameContext* css3Parser::fontFamilyName() {
  FontFamilyNameContext *_localctx = _tracker.createInstance<FontFamilyNameContext>(_ctx, getState());
  enterRule(_localctx, 146, css3Parser::RuleFontFamilyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1090);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::String_: {
        enterOuterAlt(_localctx, 1);
        setState(1080);
        match(css3Parser::String_);
        break;
      }

      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        enterOuterAlt(_localctx, 2);
        setState(1081);
        ident();
        setState(1087);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1082);
            ws();
            setState(1083);
            ident(); 
          }
          setState(1089);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureValueBlockContext ------------------------------------------------------------------

css3Parser::FeatureValueBlockContext::FeatureValueBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::FeatureTypeContext* css3Parser::FeatureValueBlockContext::featureType() {
  return getRuleContext<css3Parser::FeatureTypeContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::FeatureValueBlockContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FeatureValueBlockContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::FeatureValueBlockContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::FeatureValueBlockContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::FeatureValueDefinitionContext *> css3Parser::FeatureValueBlockContext::featureValueDefinition() {
  return getRuleContexts<css3Parser::FeatureValueDefinitionContext>();
}

css3Parser::FeatureValueDefinitionContext* css3Parser::FeatureValueBlockContext::featureValueDefinition(size_t i) {
  return getRuleContext<css3Parser::FeatureValueDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::FeatureValueBlockContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::FeatureValueBlockContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::FeatureValueBlockContext::getRuleIndex() const {
  return css3Parser::RuleFeatureValueBlock;
}

void css3Parser::FeatureValueBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeatureValueBlock(this);
}

void css3Parser::FeatureValueBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeatureValueBlock(this);
}

css3Parser::FeatureValueBlockContext* css3Parser::featureValueBlock() {
  FeatureValueBlockContext *_localctx = _tracker.createInstance<FeatureValueBlockContext>(_ctx, getState());
  enterRule(_localctx, 148, css3Parser::RuleFeatureValueBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    featureType();
    setState(1093);
    ws();
    setState(1094);
    match(css3Parser::OpenBrace);
    setState(1095);
    ws();
    setState(1097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4626322747281113088) != 0)) {
      setState(1096);
      featureValueDefinition();
    }
    setState(1107);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 163968) != 0)) {
      setState(1099);
      ws();
      setState(1100);
      match(css3Parser::SemiColon);
      setState(1101);
      ws();
      setState(1103);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4626322747281113088) != 0)) {
        setState(1102);
        featureValueDefinition();
      }
      setState(1109);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1110);
    match(css3Parser::CloseBrace);
    setState(1111);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureTypeContext ------------------------------------------------------------------

css3Parser::FeatureTypeContext::FeatureTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FeatureTypeContext::AtKeyword() {
  return getToken(css3Parser::AtKeyword, 0);
}


size_t css3Parser::FeatureTypeContext::getRuleIndex() const {
  return css3Parser::RuleFeatureType;
}

void css3Parser::FeatureTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeatureType(this);
}

void css3Parser::FeatureTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeatureType(this);
}

css3Parser::FeatureTypeContext* css3Parser::featureType() {
  FeatureTypeContext *_localctx = _tracker.createInstance<FeatureTypeContext>(_ctx, getState());
  enterRule(_localctx, 150, css3Parser::RuleFeatureType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1113);
    match(css3Parser::AtKeyword);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureValueDefinitionContext ------------------------------------------------------------------

css3Parser::FeatureValueDefinitionContext::FeatureValueDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::FeatureValueDefinitionContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::FeatureValueDefinitionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FeatureValueDefinitionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::FeatureValueDefinitionContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

std::vector<css3Parser::NumberContext *> css3Parser::FeatureValueDefinitionContext::number() {
  return getRuleContexts<css3Parser::NumberContext>();
}

css3Parser::NumberContext* css3Parser::FeatureValueDefinitionContext::number(size_t i) {
  return getRuleContext<css3Parser::NumberContext>(i);
}


size_t css3Parser::FeatureValueDefinitionContext::getRuleIndex() const {
  return css3Parser::RuleFeatureValueDefinition;
}

void css3Parser::FeatureValueDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeatureValueDefinition(this);
}

void css3Parser::FeatureValueDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeatureValueDefinition(this);
}

css3Parser::FeatureValueDefinitionContext* css3Parser::featureValueDefinition() {
  FeatureValueDefinitionContext *_localctx = _tracker.createInstance<FeatureValueDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 152, css3Parser::RuleFeatureValueDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1115);
    ident();
    setState(1116);
    ws();
    setState(1117);
    match(css3Parser::Colon);
    setState(1118);
    ws();
    setState(1119);
    number();
    setState(1125);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1120);
        ws();
        setState(1121);
        number(); 
      }
      setState(1127);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentContext ------------------------------------------------------------------

css3Parser::IdentContext::IdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::IdentContext::Ident() {
  return getToken(css3Parser::Ident, 0);
}

tree::TerminalNode* css3Parser::IdentContext::MediaOnly() {
  return getToken(css3Parser::MediaOnly, 0);
}

tree::TerminalNode* css3Parser::IdentContext::Not() {
  return getToken(css3Parser::Not, 0);
}

tree::TerminalNode* css3Parser::IdentContext::And() {
  return getToken(css3Parser::And, 0);
}

tree::TerminalNode* css3Parser::IdentContext::Or() {
  return getToken(css3Parser::Or, 0);
}

tree::TerminalNode* css3Parser::IdentContext::From() {
  return getToken(css3Parser::From, 0);
}

tree::TerminalNode* css3Parser::IdentContext::To() {
  return getToken(css3Parser::To, 0);
}


size_t css3Parser::IdentContext::getRuleIndex() const {
  return css3Parser::RuleIdent;
}

void css3Parser::IdentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdent(this);
}

void css3Parser::IdentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdent(this);
}

css3Parser::IdentContext* css3Parser::ident() {
  IdentContext *_localctx = _tracker.createInstance<IdentContext>(_ctx, getState());
  enterRule(_localctx, 154, css3Parser::RuleIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1128);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4626322747281113088) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WsContext ------------------------------------------------------------------

css3Parser::WsContext::WsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> css3Parser::WsContext::Comment() {
  return getTokens(css3Parser::Comment);
}

tree::TerminalNode* css3Parser::WsContext::Comment(size_t i) {
  return getToken(css3Parser::Comment, i);
}

std::vector<tree::TerminalNode *> css3Parser::WsContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::WsContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}


size_t css3Parser::WsContext::getRuleIndex() const {
  return css3Parser::RuleWs;
}

void css3Parser::WsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWs(this);
}

void css3Parser::WsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWs(this);
}

css3Parser::WsContext* css3Parser::ws() {
  WsContext *_localctx = _tracker.createInstance<WsContext>(_ctx, getState());
  enterRule(_localctx, 156, css3Parser::RuleWs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1133);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1130);
        _la = _input->LA(1);
        if (!(_la == css3Parser::Comment

        || _la == css3Parser::Space)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        } 
      }
      setState(1135);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void css3Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  css3parserParserInitialize();
#else
  ::antlr4::internal::call_once(css3parserParserOnceFlag, css3parserParserInitialize);
#endif
}
