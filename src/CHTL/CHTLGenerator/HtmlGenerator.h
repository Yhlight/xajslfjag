#pragma once

#include "../CHTLNode/BaseNode.h"
#include "../CHTLNode/NodeVisitor.h"
#include "../CHTLNode/StyleNode.h"
#include "../CHTLNode/ScriptNode.h"
#include <sstream>
#include <unordered_set>

namespace CHTL {

/// HTML生成选项
struct HtmlGenerationOptions {
    bool prettyPrint = true;          // 是否格式化输出
    std::string indentString = "    "; // 缩进字符串
    bool generateDoctype = true;       // 是否生成DOCTYPE
    bool includeMetadata = false;      // 是否包含元数据注释
    std::string charset = "UTF-8";     // 字符编码
    std::string language = "zh-CN";    // 页面语言
    
    HtmlGenerationOptions() = default;
};

/// HTML生成结果
struct HtmlGenerationResult {
    std::string htmlContent;           // 生成的HTML内容
    std::string cssContent;            // 提取的CSS内容
    std::string jsContent;             // 提取的JavaScript内容
    std::vector<std::string> errors;   // 生成过程中的错误
    std::vector<std::string> warnings; // 生成过程中的警告
    bool success = false;              // 是否成功生成
    
    HtmlGenerationResult() = default;
};

/// HTML生成器
/// 负责将CHTL AST转换为标准HTML
class HtmlGenerator : public NodeVisitor {
private:
    HtmlGenerationOptions options;     // 生成选项
    std::ostringstream htmlStream;     // HTML内容流
    std::ostringstream cssStream;      // CSS内容流
    std::ostringstream jsStream;       // JavaScript内容流
    
    int indentLevel;                   // 当前缩进级别
    bool isInlineContext;              // 是否在内联上下文中
    
    std::unordered_set<std::string> autoGeneratedClasses; // 自动生成的类名
    std::unordered_set<std::string> autoGeneratedIds;     // 自动生成的ID
    
    std::vector<std::string> errors;   // 错误信息
    std::vector<std::string> warnings; // 警告信息

public:
    /// 构造函数
    explicit HtmlGenerator(const HtmlGenerationOptions& opts = HtmlGenerationOptions());
    
    /// 生成HTML
    HtmlGenerationResult Generate(std::shared_ptr<BaseNode> rootNode);
    
    /// 访问者模式方法
    void VisitElement(ElementNode& node) override;
    void VisitText(TextNode& node) override;
    void VisitComment(CommentNode& node) override;
    void VisitStyleBlock(StyleBlockNode& node) override;
    void VisitScriptBlock(ScriptBlockNode& node) override;

private:
    // === 输出辅助方法 ===
    
    /// 输出缩进
    void WriteIndent();
    
    /// 输出换行
    void WriteNewline();
    
    /// 写入HTML内容
    void WriteHtml(const std::string& content);
    
    /// 写入CSS内容
    void WriteCss(const std::string& content);
    
    /// 写入JavaScript内容
    void WriteJs(const std::string& content);
    
    /// 增加缩进级别
    void IncreaseIndent() { indentLevel++; }
    
    /// 减少缩进级别
    void DecreaseIndent() { if (indentLevel > 0) indentLevel--; }
    
    // === HTML生成方法 ===
    
    /// 生成HTML文档结构
    void GenerateHtmlDocument(std::shared_ptr<BaseNode> rootNode);
    
    /// 生成HTML头部
    void GenerateHtmlHead();
    
    /// 生成HTML主体
    void GenerateHtmlBody(std::shared_ptr<BaseNode> bodyContent);
    
    /// 生成元素开始标签
    void GenerateElementStart(ElementNode& element);
    
    /// 生成元素结束标签
    void GenerateElementEnd(ElementNode& element);
    
    /// 生成元素属性
    void GenerateAttributes(ElementNode& element);
    
    /// 生成文本内容
    void GenerateTextContent(const std::string& text);
    
    /// 生成注释
    void GenerateComment(CommentNode& comment);
    
    // === 样式处理方法 ===
    
    /// 处理样式块
    void ProcessStyleBlock(StyleBlockNode& styleBlock);
    
    /// 生成内联样式
    std::string GenerateInlineStyles(StyleBlockNode& styleBlock);
    
    /// 生成全局CSS
    void GenerateGlobalCss(StyleBlockNode& styleBlock);
    
    /// 处理自动化选择器
    void ProcessAutomaticSelectors(StyleBlockNode& styleBlock, ElementNode& parentElement);
    
    // === 脚本处理方法 ===
    
    /// 处理脚本块
    void ProcessScriptBlock(ScriptBlockNode& scriptBlock);
    
    /// 生成JavaScript代码
    void GenerateJavaScript(ScriptBlockNode& scriptBlock);
    
    /// 处理CHTL JS特殊语法
    std::string ProcessCHTLJSSyntax(const std::string& script);
    
    // === 辅助方法 ===
    
    /// 转义HTML内容
    std::string EscapeHtml(const std::string& text);
    
    /// 转义属性值
    std::string EscapeAttribute(const std::string& value);
    
    /// 生成唯一的类名或ID
    std::string GenerateUniqueIdentifier(const std::string& prefix);
    
    /// 检查元素是否需要自动生成的类或ID
    void ApplyAutomaticIdentifiers(ElementNode& element);
    
    /// 添加错误信息
    void AddError(const std::string& message);
    
    /// 添加警告信息
    void AddWarning(const std::string& message);
    
    /// 清理生成状态
    void ResetState();
    
    /// 查找HTML根元素
    std::shared_ptr<ElementNode> FindHtmlRoot(std::shared_ptr<BaseNode> rootNode);
    
    /// 提取body内容
    std::shared_ptr<BaseNode> ExtractBodyContent(std::shared_ptr<BaseNode> rootNode);
    
    /// 创建生成结果
    HtmlGenerationResult CreateResult();
};

/// HTML生成器工厂
class HtmlGeneratorFactory {
public:
    /// 创建标准HTML生成器
    static std::unique_ptr<HtmlGenerator> CreateStandardGenerator();
    
    /// 创建压缩HTML生成器
    static std::unique_ptr<HtmlGenerator> CreateMinifiedGenerator();
    
    /// 创建开发环境HTML生成器（包含调试信息）
    static std::unique_ptr<HtmlGenerator> CreateDevelopmentGenerator();
};

} // namespace CHTL